<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Couchbase.Lite</name>
    </assembly>
    <members>
        <member name="T:Couchbase.Lite.ConflictResolver">
            <summary>
            ConflictResolver provides access to the default conflict resolver used by the replicator.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.ConflictResolver.Default">
            <summary>
            Access IConflictResolver.Default to get the singleton DefaultConflictResolver object.
            Then call methods on that instance.
            </summary>
        </member>
        <member name="M:Couchbase.Lite.DefaultConflictResolver.Resolve(Couchbase.Lite.Conflict)">
            <summary>
            The callback default conflict resolve method, if conflict occurs.
            </summary>
        </member>
        <member name="T:Couchbase.Lite.IConflictResolver">
            <summary>
            Conflict Resolver Interface
            </summary>
        </member>
        <member name="M:Couchbase.Lite.IConflictResolver.Resolve(Couchbase.Lite.Conflict)">
            <summary>
            The callback conflict resolve method, if conflict occurs.
            When a null document is returned, the conflict will be resolved as document deletion. 
            If there is an exception thrown in the resolve method, the exception will be caught and handled:
            <list type="bullet">
            <item>
            <description>1. The conflict resolving will be skipped. The pending conflicted documents will be resolved when the replicator is restarted.</description>
            </item>
            <item>
            <description>2. The exception will be reported in the warning log.</description>
            </item>
            <item>
            <description>3. The exception will be reported in the DocumentReplicationChange event.</description>
            </item>
            </list>
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when a document from a different database is returned.</exception>
        </member>
        <member name="T:Couchbase.Lite.ConcurrencyControl">
            <summary>
            Specifies the way that the library should behave when it encounters a situation
            when the database has been altered since the last read (e.g. a local operation read
            a document, modified it, and while it was being modified a replication committed a
            change to the document, and then the local document was saved after that)
            </summary>
        </member>
        <member name="F:Couchbase.Lite.ConcurrencyControl.LastWriteWins">
            <summary>
            Disregard the version that was received out of band and
            force this version to be current
            </summary>
        </member>
        <member name="F:Couchbase.Lite.ConcurrencyControl.FailOnConflict">
            <summary>
            Throw an exception to indicate the situation so that the latest
            data can be read again from the local database
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Database">
            <summary>
            A Couchbase Lite database.  This class is responsible for CRUD operations revolving around
            <see cref="T:Couchbase.Lite.Document"/> instances.  It is portable between platforms if the file is retrieved,
            and can be seeded with pre-populated data if desired.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Database.Config">
            <summary>
            Gets the configuration that was used to create the database.  The returned object
            is readonly; an <see cref="T:System.InvalidOperationException"/> will be thrown if the configuration
            object is modified.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Database.Count">
            <summary>
            Gets the number of documents in the database
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Database.Item(System.String)">
            <summary>
            Gets a <see cref="T:Couchbase.Lite.DocumentFragment"/> with the given document ID
            </summary>
            <param name="id">The ID of the <see cref="T:Couchbase.Lite.DocumentFragment"/> to retrieve</param>
            <returns>The <see cref="T:Couchbase.Lite.DocumentFragment"/> object</returns>
        </member>
        <member name="P:Couchbase.Lite.Database.Log">
            <summary>
            Gets the object that stores the available logging methods
            for Couchbase Lite
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Database.Name">
            <summary>
            Gets the database's name
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Database.Path">
            <summary>
            Gets the database's path.  If the database is closed or deleted, a <c>null</c>
            value will be returned.
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Database.#ctor(System.String,Couchbase.Lite.DatabaseConfiguration)">
            <summary>
            Creates a database with a given name and database configuration.  If the configuration
            is <c>null</c> then the default configuration will be used.  If the database does not yet
            exist, it will be created.
            </summary>
            <param name="name">The name of the database</param>
            <param name="configuration">The database configuration, or <c>null</c> for the default configuration</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c></exception>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown with <see cref="F:Couchbase.Lite.CouchbaseLiteError.CantOpenFile"/> if the
            directory indicated in <paramref name="configuration"/> could not be created</exception>
            <exception cref="T:Couchbase.Lite.CouchbaseException">Thrown if an error condition was returned by LiteCore</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Database.Copy(System.String,System.String,Couchbase.Lite.DatabaseConfiguration)">
            <summary>
            Copies a canned database from the given path to a new database with the given name and
            the configuration.  The new database will be created at the directory specified in the
            configuration.  Without given the database configuration, the default configuration that
            is equivalent to setting all properties in the configuration to <c>null</c> will be used.
            </summary>
            <param name="path">The source database path (i.e. path to the cblite2 folder)</param>
            <param name="name">The name of the new database to be created</param>
            <param name="config">The database configuration for the new database</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="path"/> or <paramref name="name"/>
            are <c>null</c></exception>
            <exception cref="T:Couchbase.Lite.CouchbaseException">Thrown if an error condition is returned from LiteCore</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.Delete(System.String,System.String)">
            <summary>
            Deletes a database of the given name in the given directory.  If a <c>null</c> directory
            is passed then the default directory is searched.
            </summary>
            <param name="name">The database name</param>
            <param name="directory">The directory where the database is located, or <c>null</c> to check the default directory</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c></exception>
            <exception cref="T:Couchbase.Lite.CouchbaseException">Thrown if an error condition is returned from LiteCore</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.Exists(System.String,System.String)">
            <summary>
            Checks whether a database of the given name exists in the given directory or not.  If a
            <c>null</c> directory is passed then the default directory is checked
            </summary>
            <param name="name">The database name</param>
            <param name="directory">The directory where the database is located</param>
            <returns><c>true</c> if the database exists in the directory, otherwise <c>false</c></returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> is <c>null</c></exception>
            <exception cref="T:Couchbase.Lite.CouchbaseException">Thrown if an error condition is returned from LiteCore</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.SetLogLevel(Couchbase.Lite.Logging.LogDomain,Couchbase.Lite.Logging.LogLevel)">
            <summary>
            [DEPRECATED] Sets the log level for the given domains(s)
            </summary>
            <param name="domains">The log domain(s)</param>
            <param name="level">The log level</param>
        </member>
        <member name="M:Couchbase.Lite.Database.AddChangeListener(System.Threading.Tasks.TaskScheduler,System.EventHandler{Couchbase.Lite.DatabaseChangedEventArgs})">
            <summary>
            Adds a change listener for the changes that occur in this database.  Signatures
            are the same as += style event handlers, but the callbacks will be called using the
            specified <see cref="T:System.Threading.Tasks.TaskScheduler"/>.  If the scheduler is null, the default task
            scheduler will be used (scheduled via thread pool).
            </summary>
            <param name="scheduler">The scheduler to use when firing the change handler</param>
            <param name="handler">The handler to invoke</param>
            <returns>A <see cref="T:Couchbase.Lite.ListenerToken"/> that can be used to remove the handler later</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="handler"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called after the database is closed</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.AddChangeListener(System.EventHandler{Couchbase.Lite.DatabaseChangedEventArgs})">
            <summary>
            Adds a change listener for the changes that occur in this database.  Signatures
            are the same as += style event handlers.  The callback will be invoked on a thread pool
            thread.
            </summary>
            <param name="handler">The handler to invoke</param>
            <returns>A <see cref="T:Couchbase.Lite.ListenerToken"/> that can be used to remove the handler later</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="handler"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called after the database is closed</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.AddDocumentChangeListener(System.String,System.Threading.Tasks.TaskScheduler,System.EventHandler{Couchbase.Lite.DocumentChangedEventArgs})">
            <summary>
            Adds a document change listener for the document with the given ID and the <see cref="T:System.Threading.Tasks.TaskScheduler"/>
            that will be used to invoke the callback.  If the scheduler is not specified, then the default scheduler
            will be used (scheduled via thread pool)
            </summary>
            <param name="id">The document ID</param>
            <param name="scheduler">The scheduler to use when firing the event handler</param>
            <param name="handler">The logic to handle the event</param>
            <returns>A <see cref="T:Couchbase.Lite.ListenerToken"/> that can be used to remove the listener later</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="handler"/> or <paramref name="id"/>
            is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called after the database is closed</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.AddDocumentChangeListener(System.String,System.EventHandler{Couchbase.Lite.DocumentChangedEventArgs})">
            <summary>
            Adds a document change listener for the document with the given ID.  The callback will be
            invoked on a thread pool thread.
            </summary>
            <param name="id">The document ID</param>
            <param name="handler">The logic to handle the event</param>
            <returns>A <see cref="T:Couchbase.Lite.ListenerToken"/> that can be used to remove the listener later</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="handler"/> or <paramref name="id"/>
            is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called after the database is closed</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.Close">
            <summary>
            Closes the database
            </summary>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown with <see cref="F:LiteCore.Interop.C4ErrorCode.Busy"/> if there are still active replicators
            or query listeners when the close call occurred</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.Compact">
            <summary>
            Compacts the database file by deleting unused attachment files and vacuuming
            the SQLite database
            </summary>
            <exception cref="T:Couchbase.Lite.CouchbaseException">Thrown if an error condition is returned from LiteCore</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called after the database is closed</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.CreateIndex(System.String,Couchbase.Lite.Query.IIndex)">
            <summary>
            Creates an index which could be a value index from <see cref="M:Couchbase.Lite.Query.IndexBuilder.ValueIndex(Couchbase.Lite.Query.IValueIndexItem[])"/> or a full-text search index
            from <see cref="M:Couchbase.Lite.Query.IndexBuilder.FullTextIndex(Couchbase.Lite.Query.IFullTextIndexItem[])"/> with the given name.
            The name can be used for deleting the index. Creating a new different index with an existing
            index name will replace the old index; creating the same index with the same name will be no-ops.
            </summary>
            <param name="name">The index name</param>
            <param name="index">The index</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name"/> or <paramref name="index"/>
            is <c>null</c></exception>
            <exception cref="T:Couchbase.Lite.CouchbaseException">Thrown if an error condition is returned from LiteCore</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called after the database is closed</exception>
            <exception cref="T:System.NotSupportedException">Thrown if an implementation of <see cref="T:Couchbase.Lite.Query.IIndex"/> other than one of the library
            provided ones is used</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.Delete">
            <summary>
            Deletes a database
            </summary>
            <exception cref="T:Couchbase.Lite.CouchbaseException">Thrown if an error condition is returned from LiteCore</exception>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown with <see cref="F:LiteCore.Interop.C4ErrorCode.Busy"/> if there are still active replicators
            or query listeners when the close call occurred</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called after the database is closed</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.Delete(Couchbase.Lite.Document)">
            <summary>
            Deletes a document from the database.  When write operations are executed
            concurrently, the last writer will overwrite all other written values.
            Calling this method is the same as calling <see cref="M:Couchbase.Lite.Database.Delete(Couchbase.Lite.Document,Couchbase.Lite.ConcurrencyControl)"/>
            with <see cref="F:Couchbase.Lite.ConcurrencyControl.LastWriteWins"/>
            </summary>
            <param name="document">The document</param>
            <exception cref="T:Couchbase.Lite.CouchbaseException">Thrown if an error condition is returned from LiteCore</exception>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown with <see cref="F:LiteCore.Interop.C4ErrorCode.InvalidParameter"/>
            when trying to save a document into a database other than the one it was previously added to</exception>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown with <see cref="F:LiteCore.Interop.C4ErrorCode.NotFound"/>
            when trying to delete a document that hasn't been saved into a <see cref="T:Couchbase.Lite.Database"/> yet</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called after the database is closed</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.Delete(Couchbase.Lite.Document,Couchbase.Lite.ConcurrencyControl)">
            <summary>
            Deletes the given <see cref="T:Couchbase.Lite.Document"/> from this database
            </summary>
            <param name="document">The document to save</param>
            <param name="concurrencyControl">The rule to use when encountering a conflict in the database</param>
            <returns><c>true</c> if the delete succeeded, <c>false</c> if there was a conflict</returns>
            <exception cref="T:Couchbase.Lite.CouchbaseException">Thrown if an error condition is returned from LiteCore</exception>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown with <see cref="F:LiteCore.Interop.C4ErrorCode.InvalidParameter"/>
            when trying to save a document into a database other than the one it was previously added to</exception>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Thrown with <see cref="F:LiteCore.Interop.C4ErrorCode.NotFound"/>
            when trying to delete a document that hasn't been saved into a <see cref="T:Couchbase.Lite.Database"/> yet</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called after the database is closed</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.DeleteIndex(System.String)">
            <summary>
            Deletes the index with the given name
            </summary>
            <param name="name">The name of the index to delete</param>
        </member>
        <member name="M:Couchbase.Lite.Database.GetDocument(System.String)">
            <summary>
            Gets the <see cref="T:Couchbase.Lite.Document"/> with the specified ID
            </summary>
            <param name="id">The ID to use when creating or getting the document</param>
            <returns>The instantiated document, or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:Couchbase.Lite.Database.GetIndexes">
            <summary>
            Gets a list of index names that are present in the database
            </summary>
            <returns>The list of created index names</returns>
        </member>
        <member name="M:Couchbase.Lite.Database.InBatch(System.Action)">
            <summary>
            Runs the given batch of operations as an atomic unit
            </summary>
            <param name="action">The <see cref="T:System.Action"/> containing the operations. </param>
        </member>
        <member name="M:Couchbase.Lite.Database.Purge(Couchbase.Lite.Document)">
            <summary>
            Purges the given <see cref="T:Couchbase.Lite.Document"/> from the database.  This leaves
            no trace behind and will not be replicated
            </summary>
            <param name="document">The document to purge</param>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to purge a document from a database
            other than the one it was previously added to</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.Purge(System.String)">
            <summary>
            Purges the given document id of the <see cref="T:Couchbase.Lite.Document"/> 
            from the database.  This leaves no trace behind and will 
            not be replicated
            </summary>
            <param name="docId">The id of the document to purge</param>
            <exception cref="F:LiteCore.Interop.C4ErrorCode.NotFound">Throws NOT FOUND error if the document 
            of the docId doesn't exist.</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.SetDocumentExpiration(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Sets an expiration date on a document. After this time, the document
            will be purged from the database.
            </summary>
            <param name="docId"> The ID of the <see cref="T:Couchbase.Lite.Document"/> </param> 
            <param name="expiration"> Nullable expiration timestamp as a 
            <see cref="T:System.DateTimeOffset"/>, set timestamp to <c>null</c> 
            to remove expiration date time from doc.</param>
            <returns>Whether successfully sets an expiration date on the document</returns>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Throws NOT FOUND error if the document 
            doesn't exist</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.GetDocumentExpiration(System.String)">
            <summary>
            Returns the expiration time of the document. <c>null</c> will be returned
            if there is no expiration time set
            </summary>
            <param name="docId"> The ID of the <see cref="T:Couchbase.Lite.Document"/> </param>
            <returns>Nullable expiration timestamp as a <see cref="T:System.DateTimeOffset"/> 
            of the document or <c>null</c> if time not set. </returns>
            <exception cref="T:Couchbase.Lite.CouchbaseLiteException">Throws NOT FOUND error if the document 
            doesn't exist</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.RemoveChangeListener(Couchbase.Lite.ListenerToken)">
            <summary>
            Removes a database changed listener by token
            </summary>
            <param name="token">The token received from <see cref="M:Couchbase.Lite.Database.AddChangeListener(System.Threading.Tasks.TaskScheduler,System.EventHandler{Couchbase.Lite.DatabaseChangedEventArgs})"/>
            and family</param>
        </member>
        <member name="M:Couchbase.Lite.Database.Save(Couchbase.Lite.MutableDocument)">
            <summary>
            Saves the given <see cref="T:Couchbase.Lite.MutableDocument"/> into this database.  This call is equivalent to calling
            <see cref="M:Couchbase.Lite.Database.Save(Couchbase.Lite.MutableDocument,Couchbase.Lite.ConcurrencyControl)" /> with a second argument of
            <see cref="F:Couchbase.Lite.ConcurrencyControl.LastWriteWins"/>
            </summary>
            <param name="document">The document to save</param>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to save a document into a database
            other than the one it was previously added to</exception>
        </member>
        <member name="M:Couchbase.Lite.Database.Save(Couchbase.Lite.MutableDocument,Couchbase.Lite.ConcurrencyControl)">
            <summary>
            Saves the given <see cref="T:Couchbase.Lite.MutableDocument"/> into this database
            </summary>
            <param name="document">The document to save</param>
            <param name="concurrencyControl">The rule to use when encountering a conflict in the database</param>
            <exception cref="T:System.InvalidOperationException">Thrown when trying to save a document into a database
            other than the one it was previously added to</exception>
            <returns><c>true</c> if the save succeeded, <c>false</c> if there was a conflict</returns>
        </member>
        <member name="M:Couchbase.Lite.Database.Save(Couchbase.Lite.MutableDocument,System.Func{Couchbase.Lite.MutableDocument,Couchbase.Lite.Document,System.Boolean})">
            <summary>
            Saves a document to the database. When write operations are executed concurrently, 
            and if conflicts occur, conflict handler will be called. Use the handler to directly
            edit the document.Returning true, will save the document. Returning false, will cancel
            the save operation.
            </summary>
            <param name="document">The document to save</param>
            <param name="conflictHandler">The conflict handler block which can be used to resolve it.</param> 
            <returns><c>true</c> if the save succeeded, <c>false</c> if there was a conflict</returns>
        </member>
        <member name="M:Couchbase.Lite.Database.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Database.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Database.ToString">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Database.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Couchbase.Lite.DatabaseChangedEventArgs">
            <summary>
            The parameters of a database changed event
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DatabaseChangedEventArgs.Database">
            <summary>
            Gets the database in which the change occurred
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DatabaseChangedEventArgs.DocumentIDs">
            <summary>
            Gets the document that was changed
            </summary>
        </member>
        <member name="T:Couchbase.Lite.DatabaseConfiguration">
            <summary>
            A struct containing configuration for creating or opening database data
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DatabaseConfiguration.Directory">
            <summary>
            Gets or sets the directory to use when creating or opening the data
            </summary>
        </member>
        <member name="M:Couchbase.Lite.DatabaseConfiguration.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Couchbase.Lite.DocumentChangedEventArgs">
            <summary>
            The arguments for the <see cref="M:Couchbase.Lite.Database.AddDocumentChangeListener(System.String,System.EventHandler{Couchbase.Lite.DocumentChangedEventArgs})"/> 
            event
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DocumentChangedEventArgs.DocumentID">
            <summary>
            The ID of the document that changed
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DocumentChangedEventArgs.Database">
            <summary>
            The source of the document that changed
            </summary>
        </member>
        <member name="T:Couchbase.Lite.ListenerToken">
            <summary>
            A token that stores information about an event handler that
            is registered on a Couchbase Lite object (for example
            <see cref="M:Couchbase.Lite.Database.AddChangeListener(System.EventHandler{Couchbase.Lite.DatabaseChangedEventArgs})"/>)
            </summary>
        </member>
        <member name="T:Couchbase.Lite.DI.CouchbaseDependencyAttribute">
            <summary>
            An attribute to indicate that the specified class implements a dependency for
            Couchbase Lite (e.g. <see cref="T:Couchbase.Lite.DI.IDefaultDirectoryResolver"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DI.CouchbaseDependencyAttribute.Lazy">
            <summary>
            Gets or sets if the dependency should be created when it is
            first requested (<c>true</c>) or immediately upon registration.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DI.CouchbaseDependencyAttribute.Transient">
            <summary>
            Gets or sets if the dependency is transient (i.e. should be created
            on each request)
            </summary>
        </member>
        <member name="T:Couchbase.Lite.DI.IDefaultDirectoryResolver">
            <summary>
            An interface for resolving the default directory for a Couchbase Lite database
            since we may be operating in a sandboxed environment
            </summary>
        </member>
        <member name="M:Couchbase.Lite.DI.IDefaultDirectoryResolver.DefaultDirectory">
            <summary>
            Gets the default directory for a Couchbase Lite database to live in
            </summary>
            <returns>The default directory for a Couchbase Lite database to live in</returns>
        </member>
        <member name="T:Couchbase.Lite.DI.IMainThreadTaskScheduler">
            <summary>
            An interface for an object that can behave as a <see cref="T:System.Threading.Tasks.TaskScheduler"/>
            that invokes its tasks on the UI (main) thread of an application.  Not applicable
            for all platforms, as some do not have main threads set up in a way that is usable
            (e.g. .NET Core)
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DI.IMainThreadTaskScheduler.IsMainThread">
            <summary>
            Gets if the currently executing thread is the main thread
            of the application
            </summary>
        </member>
        <member name="M:Couchbase.Lite.DI.IMainThreadTaskScheduler.AsTaskScheduler">
            <summary>
            Returns the object as a <see cref="T:System.Threading.Tasks.TaskScheduler"/> so that
            it can be used for various .NET framework methods
            </summary>
            <returns>The main thread scheduler cast to a <see cref="T:System.Threading.Tasks.TaskScheduler"/></returns>
        </member>
        <member name="T:Couchbase.Lite.DI.IRuntimePlatform">
            <summary>
            An interface for getting OS and hardware information from a runtime platform
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DI.IRuntimePlatform.OSDescription">
            <summary>
            Gets the operating system name and version (and possibly other info)
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DI.IRuntimePlatform.HardwareName">
            <summary>
            Gets the name of the device that is running the program, if possible
            </summary>
        </member>
        <member name="T:Couchbase.Lite.DI.Service">
            <summary>
            This is the entry point for registering dependency injection implementation in Couchbase Lite .NET
            </summary>
        </member>
        <member name="M:Couchbase.Lite.DI.Service.AutoRegister(System.Reflection.Assembly)">
            <summary>
            Automatically register all the dependency types declared
            <see cref="T:Couchbase.Lite.DI.CouchbaseDependencyAttribute" />s.  To auto register classes,
            they must implement an interface and must have a default constructor.
            </summary>
            <param name="assembly"></param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="assembly"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">Thrown if an invalid type is found inside of the assembly (i.e.
            one that does not implement any interfaces and/or does not have a parameter-less constructor)</exception>
        </member>
        <member name="M:Couchbase.Lite.DI.Service.Register``2(System.Boolean)">
            <summary>
            Registers an implementation for the given service
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <typeparam name="TImplementation">The implementation type</typeparam>
            <param name="transient">If <c>true</c> each call to <see cref="M:Couchbase.Lite.DI.Service.GetInstance``1"/> will return
            a new instance, otherwise use a singleton</param>
        </member>
        <member name="M:Couchbase.Lite.DI.Service.Register``1(System.Func{``0},System.Boolean)">
            <summary>
            Registers a lazy implementation for the given service
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <param name="generator">The function that creates the object to use</param>
            <param name="transient">If <c>true</c> each call to <see cref="M:Couchbase.Lite.DI.Service.GetInstance``1"/> will return
            a new instance, otherwise use a singleton</param>
        </member>
        <member name="M:Couchbase.Lite.DI.Service.Register``1(``0)">
            <summary>
            Registers an instantiated object as a singleton implementation for a service
            </summary>
            <typeparam name="TService">The service type</typeparam>
            <param name="instance">The singleton instance to use as the implementation</param>
        </member>
        <member name="M:Couchbase.Lite.DI.Service.GetInstance``1">
            <summary>
            Gets the implementation for the given service, or <c>null</c>
            if no implementation is registered
            </summary>
            <typeparam name="T">The type of service to get an implementation for</typeparam>
            <returns>The implementation for the given service</returns>
        </member>
        <member name="T:Couchbase.Lite.ArrayObject">
            <summary>
            A class representing a readonly ordered collection of objects
            </summary>
        </member>
        <member name="P:Couchbase.Lite.ArrayObject.Count">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.ArrayObject.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.ToList">
            <summary>
            Similar to the LINQ method, but returns all objects converted to standard
            .NET types
            </summary>
            <returns>A list of standard .NET typed objects in the array</returns>
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.ToMutable">
            <summary>
            Creates a copy of this object that can be mutated
            </summary>
            <returns>A mutable copy of the array</returns>
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetBlob(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetDate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetDictionary(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetFloat(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetInt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetLong(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetValue(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.ArrayObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Couchbase.Lite.Blob">
            <summary>
            A class representing an arbitrary piece of binary data
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Blob.Content">
            <summary>
            Gets the contents of the blob as an in-memory array
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this blob has no associated data (unusual)</exception>
        </member>
        <member name="P:Couchbase.Lite.Blob.ContentStream">
            <summary>
            Gets the contents of the blob as a <see cref="T:System.IO.Stream"/>
            </summary>
            <remarks>
            The caller is responsible for disposing the Stream when finished with it.
            </remarks>
        </member>
        <member name="P:Couchbase.Lite.Blob.ContentType">
            <summary>
            Gets the content type of the blob
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Blob.Digest">
            <summary>
            Gets the digest of the blob, once it is saved
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Blob.Length">
            <summary>
            Gets the length of the data that the blob contains
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Blob.Properties">
            <summary>
            Gets the metadata of the blob instance
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Blob.#ctor(System.String,System.Byte[])">
            <summary>
            Creates a blob given a type and in memory content
            </summary>
            <param name="contentType">The binary type of the blob</param>
            <param name="content">The content of the blob</param>
            <returns>An instantiated <see cref="T:Couchbase.Lite.Blob" /> object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>content</c> is <c>null</c></exception>
        </member>
        <member name="M:Couchbase.Lite.Blob.#ctor(System.String,System.IO.Stream)">
            <summary>
            Creates a blob given a type and streaming content
            </summary>
            <param name="contentType">The binary type of the blob</param>
            <param name="stream">The stream containing the blob content</param>
            <returns>An instantiated <see cref="T:Couchbase.Lite.Blob" /> object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>stream</c> is <c>null</c></exception>
        </member>
        <member name="M:Couchbase.Lite.Blob.#ctor(System.String,System.Uri)">
            <summary>
            Creates an blob given a type and a URL to a file
            </summary>
            <param name="contentType">The binary type of the blob</param>
            <param name="fileUrl">The url to the file to read</param>
            <returns>An instantiated <see cref="T:Couchbase.Lite.Blob" /> object</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <c>fileUrl</c> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException">Thrown if fileUrl is not a file based URL</exception>
        </member>
        <member name="M:Couchbase.Lite.Blob.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
            <returns><c>true</c> if the specified object is equal to the current object; otherwise, <c>false</c>.</returns>
            <param name="obj">The object to compare with the current object. </param>
        </member>
        <member name="M:Couchbase.Lite.Blob.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Couchbase.Lite.DictionaryObject">
            <summary>
            A class representing a key-value collection that is read only
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DictionaryObject.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.DictionaryObject.Count">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.DictionaryObject.Keys">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.ToMutable">
            <summary>
            Creates a copy of this object that can be mutated
            </summary>
            <returns>A mutable copy of the dictionary</returns>
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.KeysChanged">
            <summary>
            Signal that the keys of this object have changed (not possible for
            this class, but a subclass might)
            </summary>
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetBlob(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetBoolean(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetDate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetDictionary(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetDouble(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetFloat(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetInt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetLong(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.ToDictionary">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.DictionaryObject.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An enumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="T:Couchbase.Lite.Document">
            <summary>
            A class representing a document which cannot be altered
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Document._dict">
            <summary>
            The backing dictionary for this document
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Document.Database">
            <summary>
            Gets the database that this document belongs to, if any
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Document.Id">
            <summary>
            Gets this document's unique ID
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Document.RevisionID">
            <summary>
            The RevisionID in Document class is a constant, while the RevisionID in <see cref="T:Couchbase.Lite.MutableDocument" /> class is not.
            Newly created document will have a null RevisionID. The RevisionID in <see cref="T:Couchbase.Lite.MutableDocument" /> will be updated on save.
            The RevisionID format is opaque, which means it's format has no meaning and shouldn’t be parsed to get information.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Document.Sequence">
            <summary>
            Gets the sequence of this document (a unique incrementing number
            identifying its status in a database)
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Document.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.Document.Keys">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.Document.Count">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.ToMutable">
            <summary>
            Creates a mutable version of a document (i.e. one that
            can be edited)
            </summary>
            <exception cref="T:System.InvalidOperationException">
            InvalidOperationException thrown when trying edit Documents from a replication filter.
            </exception>
            <returns>A mutable version of the document</returns>
        </member>
        <member name="M:Couchbase.Lite.Document.ToString">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetBlob(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetBoolean(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetDate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetDictionary(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetDouble(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetFloat(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetInt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetLong(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.GetString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.ToDictionary">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Document.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Document.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.DocumentFragment">
            <summary>
            DocumentFragment provides access to a <see cref="P:Couchbase.Lite.DocumentFragment.Document"/> object.  It also provides subscript access
            by key to the data values of the wrapped document.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DocumentFragment.Document">
            <summary>
            Gets the <see cref="P:Couchbase.Lite.DocumentFragment.Document"/> from the document fragment
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DocumentFragment.Exists">
            <summary>
            Gets whether or not this document is in the database
            </summary>
        </member>
        <member name="P:Couchbase.Lite.DocumentFragment.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.IArray">
            <summary>
            An interface representing a read-only linear collection of objects
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IArray.Count">
            <summary>
            Gets the number of elements in this array
            </summary>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetArray(System.Int32)">
            <summary>
            Gets the value at the given index as a read only array
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetBlob(System.Int32)">
            <summary>
            Gets the value at the given index as a <see cref="T:Couchbase.Lite.Blob"/>
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetBoolean(System.Int32)">
            <summary>
            Gets the value at the given index as a <see cref="T:System.Boolean"/>
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or its converted equivalent</returns>
            <remarks>Any non-zero object will be treated as true, so don't rely on 
            any sort of parsing</remarks>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetDate(System.Int32)">
            <summary>
            Gets the value at the given index as a <see cref="T:System.DateTimeOffset"/>
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or a default</returns>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetDictionary(System.Int32)">
            <summary>
            Gets the value at the given index as a <see cref="T:Couchbase.Lite.DictionaryObject"/>
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetDouble(System.Int32)">
            <summary>
            Gets the value at the given index as a <see cref="T:System.Double"/>
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or its converted equivalent</returns>
            <remarks><c>true</c> will be converted to 1.0, and everything else that
            is non-numeric will be 0.0</remarks>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetFloat(System.Int32)">
            <summary>
            Gets the value at the given index as a <see cref="T:System.Single"/>
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or its converted equivalent</returns>
            <remarks><c>true</c> will be converted to 1.0f, and everything else that
            is non-numeric will be 0.0f</remarks>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetInt(System.Int32)">
            <summary>
            Gets the value at the given index as an <see cref="T:System.Int32"/>
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or its converted equivalent</returns>
            <remarks><c>true</c> will be converted to 1, a <see cref="T:System.Double"/> value
            will be rounded, and everything else non-numeric will be 0</remarks>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetLong(System.Int32)">
            <summary>
            Gets the value at the given index as an <see cref="T:System.Int64"/>
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or its converted equivalent</returns>
            <remarks><c>true</c> will be converted to 1, a <see cref="T:System.Double"/> value
            will be rounded, and everything else non-numeric will be 0</remarks>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetString(System.Int32)">
            <summary>
            Gets the value at the given index as a <see cref="T:System.String"/>
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IArray.GetValue(System.Int32)">
            <summary>
            Gets the value at the given index as an untyped object
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or <c>null</c></returns>
            <remarks>This method should be avoided for numeric types, whose
            underlying representation is subject to change and thus
            <see cref="T:System.InvalidCastException"/>s </remarks>
        </member>
        <member name="M:Couchbase.Lite.IArray.ToList">
            <summary>
            Converts the contents of the array to a .NET list type
            </summary>
            <returns>The contents of the array as a .NET list</returns>
        </member>
        <member name="T:Couchbase.Lite.Conflict">
            <summary>
            Conflict contains information of the conflicted documents, including local and 
            remote document’s content. The null content means that the document is deleted.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Conflict.DocumentID">
            <summary>
            The conflict resolved document id.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Conflict.LocalDocument">
            <summary>
            The document in local database. If null, the document is deleted.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Conflict.RemoteDocument">
            <summary>
            The document in remote database. If null, the document is deleted.
            </summary>
        </member>
        <member name="T:Couchbase.Lite.IDictionaryObject">
            <summary>
            An interface representing a readonly key-value collection with type-safe accessors
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IDictionaryObject.Count">
            <summary>
            Gets the number of entries in this dictionary
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IDictionaryObject.Keys">
            <summary>
            Gets all the keys held by this dictionary
            </summary>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.Contains(System.String)">
            <summary>
            Checks if a given key is present in the dictionary
            </summary>
            <param name="key">The key to check for</param>
            <returns><c>true</c> if the dictionary contains the key, else <c>false</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetArray(System.String)">
            <summary>
            Gets the value of a given key as an <see cref="T:Couchbase.Lite.IArray"/>
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetBlob(System.String)">
            <summary>
            Gets the value of a given key as a <see cref="T:Couchbase.Lite.Blob"/>
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetBoolean(System.String)">
            <summary>
            Gets the value of a given key as a <see cref="T:System.Boolean"/>
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or its converted equivalent</returns>
            <remarks>Any non-zero object will be treated as true, so don't rely on 
            any sort of parsing</remarks>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetDate(System.String)">
            <summary>
            Gets the value of a given key as a <see cref="T:System.DateTimeOffset"/>
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or a default value</returns>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetDictionary(System.String)">
            <summary>
            Gets the value of a given key as a readonly dictionary
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetDouble(System.String)">
            <summary>
            Gets the value of a given key as a <see cref="T:System.Double"/>
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or its converted equivalent</returns>
            <remarks><c>true</c> will be converted to 1.0, and everything else that
            is non-numeric will be 0.0</remarks>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetFloat(System.String)">
            <summary>
            Gets the value of a given key as a <see cref="T:System.Single"/>
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or its converted equivalent</returns>
            <remarks><c>true</c> will be converted to 1.0f, and everything else that
            is non-numeric will be 0.0f</remarks>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetInt(System.String)">
            <summary>
            Gets the value of a given key as an <see cref="T:System.Int32"/>
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or its converted equivalent</returns>
            <remarks><c>true</c> will be converted to 1, a <see cref="T:System.Double"/> value
            will be rounded, and everything else non-numeric will be 0</remarks>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetLong(System.String)">
            <summary>
            Gets the value of a given key as an <see cref="T:System.Int64"/>
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or its converted equivalent</returns>
            <remarks><c>true</c> will be converted to 1, a <see cref="T:System.Double"/> value
            will be rounded, and everything else non-numeric will be 0</remarks>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetValue(System.String)">
            <summary>
            Gets the value of a given key as an untyped object
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or <c>null</c></returns>
            <remarks>This method should be avoided for numeric types, whose
            underlying representation is subject to change and thus
            <see cref="T:System.InvalidCastException"/>s </remarks>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.GetString(System.String)">
            <summary>
            Gets the value of a given key as a <see cref="T:System.String"/>
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IDictionaryObject.ToDictionary">
            <summary>
            Converts this object to a standard .NET string to object
            <see cref="T:System.Collections.Generic.Dictionary`2"/>
            </summary>
            <returns>The contents of this object as a .NET dictionary</returns>
        </member>
        <member name="T:Couchbase.Lite.IDictionaryFragment">
            <summary>
            An interface representing a readonly entry in a key path that is
            able to be indexed by <see cref="T:System.String"/>
            (e.g. object["key1"]["key2"])
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IDictionaryFragment.Item(System.String)">
            <summary>
            Gets the value of the given key, or lack thereof,
            wrapped inside of a <see cref="T:Couchbase.Lite.IFragment"/>
            </summary>
            <param name="key">The key to check</param>
            <returns>The value of the given key, or lack thereof</returns>
        </member>
        <member name="T:Couchbase.Lite.IArrayFragment">
            <summary>
            An interface representing a readonly entry in a key path
            that is able to be indexed by position
            (e.g. object[0][1])
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IArrayFragment.Item(System.Int32)">
            <summary>
            Gets the value of the given index, or lack thereof,
            wrapped inside of a <see cref="T:Couchbase.Lite.IFragment"/>
            </summary>
            <param name="index">The index to check</param>
            <returns>The value of the given index, or lack thereof</returns>
        </member>
        <member name="T:Couchbase.Lite.IFragment">
            <summary>
            An interface representing a readonly entry in a key-value path on
            an object.  
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Exists">
            <summary>
            Gets whether or not this object exists in the hierarchy
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Value">
            <summary>
            Gets the value of the fragment as an untyped object
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Array">
            <summary>
            Gets the contained value as a <see cref="T:Couchbase.Lite.ArrayObject"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Blob">
            <summary>
            Gets the contained value as a <see cref="P:Couchbase.Lite.IFragment.Blob"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Boolean">
            <summary>
            Gets the contained value as a <see cref="P:Couchbase.Lite.IFragment.Boolean" />
            </summary>
            <remarks>The following process is used for evaluation:
            
            <see cref="P:Couchbase.Lite.IFragment.Boolean"/> values are evaluated as is
            <c>null</c> is <c>false</c>
            Non-zero number values are <c>true</c>
            Everything else is <c>true</c>
            </remarks>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Date">
            <summary>
            Gets the contained value as a <see cref="T:System.DateTimeOffset"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Dictionary">
            <summary>
            Gets the contained value as a <see cref="T:Couchbase.Lite.DictionaryObject"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Double">
            <summary>
            Gets the contained value as a <see cref="P:Couchbase.Lite.IFragment.Double"/>
            </summary>
            <remarks><c>true</c> will be converted to 1.0, and everything else that
            is non-numeric will be 0.0</remarks>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Float">
            <summary>
            Gets the contained value as a <see cref="T:System.Single"/>
            </summary>
            <remarks><c>true</c> will be converted to 1.0f, and everything else that
            is non-numeric will be 0.0f</remarks>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Int">
            <summary>
            Gets the contained value as an <see cref="T:System.Int32"/>
            </summary>
            <remarks><c>true</c> will be converted to 1, a <see cref="P:Couchbase.Lite.IFragment.Double"/> value
            will be rounded, and everything else non-numeric will be 0</remarks>
        </member>
        <member name="P:Couchbase.Lite.IFragment.Long">
            <summary>
            Gets the contained value as an <see cref="T:System.Int64"/>
            </summary>
            <remarks><c>true</c> will be converted to 1, a <see cref="P:Couchbase.Lite.IFragment.Double"/> value
            will be rounded, and everything else non-numeric will be 0</remarks>
        </member>
        <member name="P:Couchbase.Lite.IFragment.String">
            <summary>
            Gets the contained value as a <see cref="P:Couchbase.Lite.IFragment.String"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.IMutableArray">
            <summary>
            An interface representing a writable collection of objects
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableArray.Item(System.Int32)">
            <summary>
            Gets the value of the given index, or lack thereof,
            wrapped inside of a <see cref="T:Couchbase.Lite.IMutableFragment"/>
            </summary>
            <param name="index">The index to check</param>
            <returns>The value of the given index, or lack thereof</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddValue(System.Object)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddString(System.String)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddInt(System.Int32)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddLong(System.Int64)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddFloat(System.Single)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddDouble(System.Double)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddBoolean(System.Boolean)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddBlob(Couchbase.Lite.Blob)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddDate(System.DateTimeOffset)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddArray(Couchbase.Lite.ArrayObject)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.AddDictionary(Couchbase.Lite.DictionaryObject)">
            <summary>
            Adds an entry to this collection
            </summary>
            <param name="value">The value to add</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.GetArray(System.Int32)">
            <summary>
            Gets the value at the given index as an array
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.GetDictionary(System.Int32)">
            <summary>
            Gets the value at the given index as a dictionary
            </summary>
            <param name="index">The index to lookup</param>
            <returns>The value at the index, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertValue(System.Int32,System.Object)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertString(System.Int32,System.String)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertInt(System.Int32,System.Int32)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertLong(System.Int32,System.Int64)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertFloat(System.Int32,System.Single)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertDouble(System.Int32,System.Double)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertBoolean(System.Int32,System.Boolean)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertBlob(System.Int32,Couchbase.Lite.Blob)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertDate(System.Int32,System.DateTimeOffset)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertArray(System.Int32,Couchbase.Lite.ArrayObject)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.InsertDictionary(System.Int32,Couchbase.Lite.DictionaryObject)">
            <summary>
            Inserts a given value at the given index
            </summary>
            <param name="index">The index to insert the item at</param>
            <param name="value">The item to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the given index
            </summary>
            <param name="index">The index at which to remove the item</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetData(System.Collections.IList)">
            <summary>
            Replaces the contents of this collection with the contents of the given one
            </summary>
            <param name="array">The contents to replace the current contents</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetValue(System.Int32,System.Object)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetString(System.Int32,System.String)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetInt(System.Int32,System.Int32)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetLong(System.Int32,System.Int64)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetFloat(System.Int32,System.Single)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetDouble(System.Int32,System.Double)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetBoolean(System.Int32,System.Boolean)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetBlob(System.Int32,Couchbase.Lite.Blob)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetDate(System.Int32,System.DateTimeOffset)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetArray(System.Int32,Couchbase.Lite.ArrayObject)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableArray.SetDictionary(System.Int32,Couchbase.Lite.DictionaryObject)">
            <summary>
            Overwrites the value at the given index with the given value
            </summary>
            <param name="index">The index to overwrite</param>
            <param name="value">The value to insert</param>
            <returns>The array for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.IMutableDictionary">
            <summary>
            An interface representing a writeable key value collection
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableDictionary.Item(System.String)">
            <summary>
            Gets the value of the given key, or lack thereof,
            wrapped inside of a <see cref="T:Couchbase.Lite.IMutableFragment"/>
            </summary>
            <param name="key">The key to check</param>
            <returns>The value of the given key, or lack thereof</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.GetArray(System.String)">
            <summary>
            Gets the value of a given key as an <see cref="T:Couchbase.Lite.IMutableArray"/>
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.GetDictionary(System.String)">
            <summary>
            Gets the value of a given key as a dictionary
            </summary>
            <param name="key">The key to check the value for</param>
            <returns>The contained value, or <c>null</c></returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.Remove(System.String)">
            <summary>
            Removes the given key from this dictionary
            </summary>
            <param name="key">The key to remove</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetValue(System.String,System.Object)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetData(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Replaces the contents of this dictionary with the contents of the
            given one
            </summary>
            <param name="dictionary">The dictionary to replace the current contents with</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetString(System.String,System.String)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetInt(System.String,System.Int32)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetLong(System.String,System.Int64)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetFloat(System.String,System.Single)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetDouble(System.String,System.Double)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetBoolean(System.String,System.Boolean)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetBlob(System.String,Couchbase.Lite.Blob)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetDate(System.String,System.DateTimeOffset)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetArray(System.String,Couchbase.Lite.ArrayObject)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.IMutableDictionary.SetDictionary(System.String,Couchbase.Lite.DictionaryObject)">
            <summary>
            Sets the given key to the given value
            </summary>
            <param name="key">The key to set</param>
            <param name="value">The value to set</param>
            <returns>Itself for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.IMutableDictionaryFragment">
            <summary>
            An interface representing a writeable object capable of being indexed 
            via <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableDictionaryFragment.Item(System.String)">
            <summary>
            Gets the value of an arbitrary <see cref="T:System.String"/> key
            </summary>
            <param name="key">The key to lookup the value for</param>
            <returns>The value, or lack thereof, wrapped in a <see cref="T:Couchbase.Lite.IMutableFragment"/></returns>
        </member>
        <member name="T:Couchbase.Lite.IMutableArrayFragment">
            <summary>
            An interface representing a writeable object capable of being indexed
            via <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableArrayFragment.Item(System.Int32)">
            <summary>
            Gets the value of an arbitrary index
            </summary>
            <param name="index">The index to lookup the value for</param>
            <returns>The value, or lack thereof, wrapped in a <see cref="T:Couchbase.Lite.IMutableFragment"/></returns>
        </member>
        <member name="T:Couchbase.Lite.IMutableFragment">
            <summary>
            An interface describing a mutable entry in a key-value path
            on an object.  Note that if the key-value path does not exist,
            then setting the value will throw an exception.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.Value">
            <summary>
            Gets or sets the value of the fragment as an untyped object
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when a value is attempted to be
            set on a key path that does not exist</exception>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.Array">
            <summary>
            Gets the contained value as a <see cref="T:Couchbase.Lite.MutableArrayObject"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.Blob">
            <summary>
            Gets the contained value as a <see cref="P:Couchbase.Lite.IMutableFragment.Blob"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.Boolean">
            <summary>
            Gets the contained value as a <see cref="P:Couchbase.Lite.IMutableFragment.Boolean"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.Date">
            <summary>
            Gets the contained value as a <see cref="T:System.DateTimeOffset"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.Dictionary">
            <summary>
            Gets the contained value as a <see cref="T:Couchbase.Lite.MutableDictionaryObject"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.Double">
            <summary>
            Gets the contained value as a <see cref="P:Couchbase.Lite.IMutableFragment.Double"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.Float">
            <summary>
            Gets the contained value as a <see cref="T:System.Single"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.Int">
            <summary>
            Gets the contained value as an <see cref="T:System.Int32"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.Long">
            <summary>
            Gets the contained value as an <see cref="T:System.Int64"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.IMutableFragment.String">
            <summary>
            Gets the contained value as a <see cref="P:Couchbase.Lite.IMutableFragment.String"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.MutableArrayObject">
            <summary>
            A class representing an editable collection of objects
            </summary>
        </member>
        <member name="P:Couchbase.Lite.MutableArrayObject.Item(System.Int32)">
            <summary>
            Gets a fragment style entry from the array by index
            </summary>
            <param name="index">The index to retrieve</param>
            <returns>The fragment of the object at the index</returns>
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.#ctor(System.Collections.IList)">
            <summary>
            Creates an array with the given data
            </summary>
            <param name="array">The data to populate the array with</param>
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddInt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddLong(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddFloat(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddDouble(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddBoolean(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddBlob(Couchbase.Lite.Blob)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddDate(System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddArray(Couchbase.Lite.ArrayObject)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.AddDictionary(Couchbase.Lite.DictionaryObject)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.GetArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.GetDictionary(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertString(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertInt(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertLong(System.Int32,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertFloat(System.Int32,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertDouble(System.Int32,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertBoolean(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertBlob(System.Int32,Couchbase.Lite.Blob)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertDate(System.Int32,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertArray(System.Int32,Couchbase.Lite.ArrayObject)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.InsertDictionary(System.Int32,Couchbase.Lite.DictionaryObject)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetData(System.Collections.IList)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetValue(System.Int32,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetString(System.Int32,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetInt(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetLong(System.Int32,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetFloat(System.Int32,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetDouble(System.Int32,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetBoolean(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetBlob(System.Int32,Couchbase.Lite.Blob)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetDate(System.Int32,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetArray(System.Int32,Couchbase.Lite.ArrayObject)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableArrayObject.SetDictionary(System.Int32,Couchbase.Lite.DictionaryObject)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.MutableDictionaryObject">
            <summary>
            A class representing a writeable string to object dictionary
            </summary>
        </member>
        <member name="P:Couchbase.Lite.MutableDictionaryObject.Item(System.String)">
            <summary>
            Gets the fragment value for the given key in this dictionary
            </summary>
            <param name="key">The key whose value to retrieve</param>
            <returns>The fragment representing the value at the given key</returns>
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a dictionary given the initial set of keys and values
            from an existing dictionary
            </summary>
            <param name="dict">The dictionary to copy the keys and values from</param>
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.GetArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.GetDictionary(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetValue(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetData(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetString(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetInt(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetLong(System.String,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetFloat(System.String,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetDouble(System.String,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetBoolean(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetBlob(System.String,Couchbase.Lite.Blob)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetDate(System.String,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetArray(System.String,Couchbase.Lite.ArrayObject)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDictionaryObject.SetDictionary(System.String,Couchbase.Lite.DictionaryObject)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.MutableDocument">
            <summary>
            A class representing an entry in a Couchbase Lite <see cref="T:Couchbase.Lite.Database"/>.  
            It consists of some metadata, and a collection of user-defined properties
            </summary>
        </member>
        <member name="P:Couchbase.Lite.MutableDocument.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.#ctor(System.String)">
            <summary>
            Creates a document given an ID
            </summary>
            <param name="id">The ID for the document</param>
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a document with the given properties
            </summary>
            <param name="data">The properties of the document</param>
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Creates a document with the given ID and properties
            </summary>
            <param name="id">The ID for the document</param>
            <param name="data">The properties for the document</param>
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.ToMutable">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.ToString">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.GetArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.GetDictionary(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetValue(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetData(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetString(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetInt(System.String,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetLong(System.String,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetFloat(System.String,System.Single)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetDouble(System.String,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetBoolean(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetBlob(System.String,Couchbase.Lite.Blob)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetDate(System.String,System.DateTimeOffset)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetArray(System.String,Couchbase.Lite.ArrayObject)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.MutableDocument.SetDictionary(System.String,Couchbase.Lite.DictionaryObject)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.Logging.IConsoleLogger">
            <summary>
            An interface for an object that will log messages to the
            relevant debug console.  For desktop this is the terminal,
            UWP uses the visual studio debug output pane, iOS uses NSLog
            and Android uses logcat.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.IConsoleLogger.Domains">
            <summary>
            Gets or sets the domains that this logger will output
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.IConsoleLogger.Level">
            <summary>
            Overrides the <see cref="T:Couchbase.Lite.Logging.ILogger"/> Level property
            with a public setter.
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Logging.LogFileConfiguration">
            <summary>
            A class that describes the file configuration for the <see cref="T:Couchbase.Lite.Logging.FileLogger"/>
            class.  These options must be set atomically so they won't take effect unless
            a new configuration object is set on the logger.  Attempting to modify an in-use
            configuration object will result in an exception being thrown.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.LogFileConfiguration.Directory">
            <summary>
            Gets the directory that the log files are stored in.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.LogFileConfiguration.MaxRotateCount">
            <summary>
            Gets or sets the number of rotated logs that are saved (i.e.
            if the value is 1, then 2 logs will be present:  the 'current'
            and the 'rotated')
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.LogFileConfiguration.MaxSize">
            <summary>
            Gets or sets the max size of the log files in bytes.  If a log file
            passes this size then a new log file will be started.  This
            number is a best effort and the actual size may go over slightly.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.LogFileConfiguration.UsePlaintext">
            <summary>
            Gets or sets whether or not to log in plaintext.  The default is
            to log in a binary encoded format that is more CPU and I/O friendly
            and enabling plaintext is not recommended in production.
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Logging.LogFileConfiguration.#ctor(System.String)">
            <summary>
            Constructs a file configuration object with the given directory
            </summary>
            <param name="directory">The directory that logs will be written to</param>
        </member>
        <member name="M:Couchbase.Lite.Logging.LogFileConfiguration.#ctor(Couchbase.Lite.Logging.LogFileConfiguration)">
            <summary>
            Constructs a file configuration object based on another one so
            that it may be modified
            </summary>
            <param name="other">The other configuration to copy settings from</param>
        </member>
        <member name="M:Couchbase.Lite.Logging.LogFileConfiguration.#ctor(System.String,Couchbase.Lite.Logging.LogFileConfiguration)">
            <summary>
            Constructs a file configuration object based on another one but changing
            the directory
            </summary>
            <param name="directory">The directory that logs will be written to</param>
            <param name="other">The other configuration to copy the other settings from</param>
        </member>
        <member name="T:Couchbase.Lite.Logging.FileLogger">
            <summary>
            A class that controls the file logging facility of
            Couchbase Lite
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.FileLogger.Config">
            <summary>
            Gets or sets the configuration currently in use on the file logger.
            Note that once it is set, it can no longer be modified and doing so
            will throw an exception.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.FileLogger.Level">
            <summary>
            Gets or sets the max level to log.  The set level and all
            levels under it will be logged (i.e. <c>Error</c> will log
            only errors but <c>Warning</c> will log warnings and errors)
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Logging.FileLogger.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Logging.FileLogger.Log(Couchbase.Lite.Logging.LogLevel,Couchbase.Lite.Logging.LogDomain,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.Logging.ILogger">
            <summary>
            An interface for implementing a class that can accept
            logging messages from Couchbase Lite
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.ILogger.Level">
            <summary>
            Gets the level that the logger is currently
            logging
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Logging.ILogger.Log(Couchbase.Lite.Logging.LogLevel,Couchbase.Lite.Logging.LogDomain,System.String)">
            <summary>
            Performs the actual logging to the log storage
            </summary>
            <param name="level">The level of the message being logged</param>
            <param name="domain">The domain of the message being logged</param>
            <param name="message">The content of the message being logged</param>
        </member>
        <member name="T:Couchbase.Lite.Logging.Log">
            <summary>
            The class that stores the three available logging facilities in Couchbase Lite
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.Log.Console">
            <summary>
            Gets the logging facility that logs to a debugging console
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.Log.Custom">
            <summary>
            Gets or sets the user defined logging facility
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Logging.Log.File">
            <summary>
            Gets the logging facility that logs to files on the disk
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Logging.LogDomain">
            <summary>
            Contains all the available logging domains for the library.  Each log domain writes messages
            regarding a specific area of Couchbase Lite operation.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogDomain.None">
            <summary>
            A default value meaning "no domains"
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogDomain.All">
            <summary>
            Gets all the logging interfaces so logic can be applied to
            all of them
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogDomain.Couchbase">
            <summary>
            Internal Use Only, has no effect from the outside
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogDomain.Database">
            <summary>
            Gets the logging domain for database logging, which is responsible
            for logging activity between the library and the disk, including creation
            of Documents / Revisions, disk I/O, etc
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogDomain.Query">
            <summary>
            Gets the logging domain for query logging, which is responsible for
            logging information about in progress queries on data.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogDomain.Replicator">
            <summary>
            Gets the logging domain for sync logging, which is responsible for
            logging activity between the library and remote (network) endpoints.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogDomain.Network">
            <summary>
            Gest the logging domain for network related logging (web socket connections,
            BLIP protocol, etc)
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Logging.LogLevel">
            <summary>
            Defines the Couchbase Lite log verbosity levels.  The default level is
            <see cref="F:Couchbase.Lite.Logging.LogLevel.Warning"/>.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogLevel.Debug">
            <summary>
            Debug log messages, only present in debug builds.  Information useful for
            development.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogLevel.Verbose">
            <summary>
            Verbose log messages.  Additional information to help track down a problem,
            but noisy in every day use.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogLevel.Info">
            <summary>
            Informational log messages.  Standard messages that indicate what is happening.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogLevel.Warning">
            <summary>
            Warning log messages, useful to look at if a problem is detected, but not necessarily
            indicative of a problem on their own.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogLevel.Error">
            <summary>
            Error log messages.  These indicate immediate errors that need to be addressed.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Logging.LogLevel.None">
            <summary>
            Log level for disabling a given domain
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.ArrayExpression">
            <summary>
            A class containing methods for generating queries that operate on
            array types
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.ArrayExpression.Any(Couchbase.Lite.Query.IVariableExpression)">
            <summary>
            Returns the start of an expression that will evaluate if any elements
            inside of an array match a given predicate
            
            Usage:  <code>ArrayExpression.Any("x").In(Expression.Property("prop")).Satisfies(ArrayExpression.Variable("x").EqualTo(42))</code>
            </summary>
            <param name="variable">The name to assign to the variable that will be used later
            via <see cref="M:Couchbase.Lite.Query.ArrayExpression.Variable(System.String)"/></param>
            <returns>The first portion of the completed expression for further modification</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.ArrayExpression.AnyAndEvery(Couchbase.Lite.Query.IVariableExpression)">
            <summary>
            Returns the start of an expression that will evaluate the following:
            1. The array is not empty (has "any" elements)
            2. Every element in the array matches a given predicate ("every" element matches)
            
            Usage:  <code>ArrayExpression.AnyAndEvery("x").In(Expression.Property("prop")).Satisfies(ArrayExpression.Variable("x").EqualTo(42))</code>
            </summary>
            <param name="variable">The name to assign to the variable that will be used later
            via <see cref="M:Couchbase.Lite.Query.ArrayExpression.Variable(System.String)"/></param>
            <returns>The first portion of the completed expression for further modification</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.ArrayExpression.Every(Couchbase.Lite.Query.IVariableExpression)">
            <summary>
            Returns the start of an expression that will evaluate if every element inside
            of an array matches a given predicate (note: That means that an empty array will
            return <c>true</c> because "all zero" elements match)
            
            Usage:  <code>ArrayExpression.Every("x").In(Expression.Property("prop")).Satisfies(ArrayExpression.Variable("x").EqualTo(42))</code>
            </summary>
            <param name="variable">The name to assign to the variable that will be used later
            via <see cref="M:Couchbase.Lite.Query.ArrayExpression.Variable(System.String)"/></param>
            <returns>The first portion of the completed expression for further modification</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.ArrayExpression.Variable(System.String)">
            <summary>
            Returns an expression representing the value of a named variable
            assigned by earlier calls to <see cref="M:Couchbase.Lite.Query.ArrayExpression.Any(Couchbase.Lite.Query.IVariableExpression)"/> and family.
            </summary>
            <param name="name">The name of the variable</param>
            <returns>An expression representing the value of a named variable</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.ArrayFunction">
            <summary>
            A class for generating query functions that operate on
            array types
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.ArrayFunction.Contains(Couchbase.Lite.Query.IExpression,Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will query if the given array expression contains
            the given element
            </summary>
            <param name="expression">An expression that evaluates to an array (otherwise the query will
            fail)</param>
            <param name="value">The element to search for (either an expression or literal)</param>
            <returns>A function that will return true if the array contains the element, or false
            if it does not</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.ArrayFunction.Length(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will get the length of an array
            in question
            </summary>
            <param name="expression">The expression to usem when calculating (must evaluate to an array type)
            the result</param>
            <returns>A function that will get the length of the array in question</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.Collation">
            <summary>
            A factory class for creating <see cref="T:Couchbase.Lite.Query.ICollation"/> instances
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Query.Collation.DefaultLocale">
            <summary>
            The default locale for the current program,  for use with Unicode collation
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.Collation.ASCII">
            <summary>
            Creates an ASCII based collation instance
            </summary>
            <returns>An ASCII based collation instance</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Collation.Unicode">
            <summary>
            Creates a Unicode based collation instance (http://unicode.org/reports/tr10/)
            </summary>
            <returns>A Unicode based collation instance</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.DataSource">
            <summary>
            A factory class for creating data sources for queries
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.DataSource.Database(Couchbase.Lite.Database)">
            <summary>
            Creates a data source for an <see cref="T:Couchbase.Lite.Query.IQuery" /> that gets results from the given
            <see cref="M:Couchbase.Lite.Query.DataSource.Database(Couchbase.Lite.Database)" />
            </summary>
            <param name="database">The database to operate on</param>
            <returns>The source of data for the <see cref="T:Couchbase.Lite.Query.IQuery" /></returns>
        </member>
        <member name="T:Couchbase.Lite.Query.Expression">
            <summary>
            A factory for unary IExpression operators
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.All">
            <summary>
            Returns an expression to represent '*' in things like COUNT(*) and
            SELECT *
            </summary>
            <returns>The expression representing '*'</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Array(System.Collections.IList)">
            <summary>
            Returns an expression to represent a fixed array value
            </summary>
            <param name="value">The value to use</param>
            <returns>An expression representing the fixed value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Boolean(System.Boolean)">
            <summary>
            Returns an expression to represent a fixed <see cref="T:System.Boolean"/> value
            </summary>
            <param name="value">The value to use</param>
            <returns>An expression representing the fixed value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Date(System.DateTimeOffset)">
            <summary>
            Returns an expression to represent a fixed <see cref="T:System.DateTimeOffset"/> value
            </summary>
            <param name="value">The value to use</param>
            <returns>An expression representing the fixed value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Dictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Returns an expression to represent a fixed <see cref="T:System.Collections.Generic.IDictionary`2"/> value
            </summary>
            <param name="value">The value to use</param>
            <returns>An expression representing the fixed value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Double(System.Double)">
            <summary>
            Returns an expression to represent a fixed <see cref="T:System.Double"/> value
            </summary>
            <param name="value">The value to use</param>
            <returns>An expression representing the fixed value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Float(System.Single)">
            <summary>
            Returns an expression to represent a fixed <see cref="T:System.Single"/> value
            </summary>
            <param name="value">The value to use</param>
            <returns>An expression representing the fixed value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Int(System.Int32)">
            <summary>
            Returns an expression to represent a fixed <see cref="T:System.Int32"/> value
            </summary>
            <param name="value">The value to use</param>
            <returns>An expression representing the fixed value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Long(System.Int64)">
            <summary>
            Returns an expression to represent a fixed <see cref="T:System.Int64"/> value
            </summary>
            <param name="value">The value to use</param>
            <returns>An expression representing the fixed value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Negated(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression representing the negated result of an expression
            </summary>
            <param name="expression">The expression to evaluate</param>
            <returns>The negated result of the expression</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Not(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression representing the negated result of an expression
            </summary>
            <param name="expression">The expression to evaluate</param>
            <returns>The negated result of the expression</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Parameter(System.String)">
            <summary>
            Gets an expression representing a named parameter (as set in
            <see cref="P:Couchbase.Lite.Query.IQuery.Parameters"/>) for use in a query
            </summary>
            <param name="name">The name of the parameter in the parameter set</param>
            <returns>The expression representing the parameter</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Property(System.String)">
            <summary>
            Returns an expression representing the value of a named property
            </summary>
            <param name="property">The name of the property to fetch</param>
            <returns>An expression representing the value of a named property</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.String(System.String)">
            <summary>
            Returns an expression to represent a fixed <see cref="T:System.String"/> value
            </summary>
            <param name="value">The value to use</param>
            <returns>An expression representing the fixed value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Expression.Value(System.Object)">
            <summary>
            Returns an expression to represent a fixed <see cref="T:System.Object"/> value.  It must be one
            of the allowed types (i.e. the ones allowed in other methods such as <see cref="M:Couchbase.Lite.Query.Expression.String(System.String)"/>
            </summary>
            <param name="value">The value to use</param>
            <returns>An expression representing the fixed value</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.FullTextExpression">
            <summary>
            A class that generates expressions that operate on the results of full-text searching
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.FullTextExpression.Index(System.String)">
            <summary>
            Generates a query expression that will check for matches against a
            given full text index name
            </summary>
            <param name="name">The name of the full-text index to perform the
            check against</param>
            <returns>The generated query expression</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.FullTextFunction">
            <summary>
            A class that generates functions for use on the results of a full-text search
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.FullTextFunction.Rank(System.String)">
            <summary>
            Creates a full-text ranking value function indicating how well the current
            query result matches the full-text query when performing the match comparison.
            </summary>
            <param name="indexName">The FTS index name to use when performing the calculation</param>
            <returns>A function that will perform the ranking</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.Function">
            <summary>
            A class for creating <see cref="T:Couchbase.Lite.Query.IExpression"/> instances that represent functions
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Abs(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will get the absolute value of the expression
            in question
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will get the absolute value of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Acos(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will get the inverse cosine of the expression
            in question
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will get the inverse cosine of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Asin(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will get the inverse sin of the expression
            in question
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will get the inverse sin of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Atan(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will get the inverse tangent of the expression
            in question
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will get the  inverse tangent of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Atan2(Couchbase.Lite.Query.IExpression,Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will get the arctangent of the point expressed by
            expressions calculating X and Y of the point for the formula
            </summary>
            <param name="expressionX">An expression or literal to evaluate to get the X coordinate to use</param>
            <param name="expressionY">An expression or literal to evaluate to get the Y coordinate to use</param>
            <returns>A function that will get the arctangent of the point in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Avg(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will calculate the average of the
            expression in question across the results in a particular query
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will calculate the average</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Ceil(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will get the ceiling value of the expression
            in question
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will get the ceiling value of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Contains(Couchbase.Lite.Query.IExpression,Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will calculate if a given string is inside of another
            in question
            </summary>
            <param name="expression">The string or expression that evaluates to a string to search</param>
            <param name="substring">The string or expression that evaluates to a string to search for</param>
            <returns>A function that will return true if the string contains the other, or false if it does not</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Cos(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will get the cosine of the expression
            in question
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will get the cosine of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Count(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will count the occurrences of 
            expression in question across the results in a particular query
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will calculate the count</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Degrees(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will convert a numeric expression to degrees from radians
            in question
            </summary>
            <param name="expression">The numeric expression to take data from when calculating
            the result</param>
            <returns>A function that will get the value of the expression in question expressed in degrees</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.E">
            <summary>
            Creates a function that will return the value of the mathemetical constant 'e'
            </summary>
            <returns>The value of 'e'</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Exp(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns the mathematical constant 'e' raised to the given power
            </summary>
            <param name="expression">The numerical expression to take data from when calculating
            the result</param>
            <returns>A function that will get the mathematical constant 'e' raised to the given power</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Floor(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will get the floor value of the expression
            in question
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will get the floor value of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Length(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that gets the length of a string
            in question
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result (must be or evaluate to a string)</param>
            <returns>The length of the string in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Ln(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that gets the natural log of the numerical expression
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that gets the natural log of the expression</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Log(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that gets the base 10 log of the numerical expression
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that gets the base 10 log of the expression</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Lower(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that converts a string to lower case
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that converts a string to lower case</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Ltrim(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that removes whitespace from the beginning of a string
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that removes whitespace from the beginning of a string</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Max(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will calculate the max value of the
            expression in question across the results in a particular query
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will calculate the max value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.MillisToString(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will convert a numeric input representing
            milliseconds since the Unix epoch into a full ISO8601 date and time
            string in the device local time zone.
            </summary>
            <param name="expression">The expression to take data from when converting</param>
            <returns>A function that will convert the timestamp to a string</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.MillisToUTC(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will convert a numeric input representing
            milliseconds since the Unix epoch into a full ISO8601 date and time
            string in UTC time.
            </summary>
            <param name="expression">The expression to take data from when converting</param>
            <returns>A function that will convert the timestamp to a string</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Min(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will calculate the min value of the
            expression in question across the results in a particular query
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will calculate the min value</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Pi">
            <summary>
            Creates a function that will return the value of the mathemetical constant 'π'
            </summary>
            <returns>The value of 'π'</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Power(Couchbase.Lite.Query.IExpression,Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will raise the given numeric expression
            to an expression that determines the exponent
            </summary>
            <param name="b">A numeric literal or expression that provides the base</param>
            <param name="exponent">A numeric literal or expression that provides the exponent</param>
            <returns>A function that will raise the base to the given exponent</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Radians(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will convert a numeric expression to radians from degrees
            in question
            </summary>
            <param name="expression">The numeric expression to take data from when calculating
            the result</param>
            <returns>A function that will get the value of the expression in question expressed in radians</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Round(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will round the given expression
            in question
            </summary>
            <param name="expression">The numeric expression to take data from when calculating
            the result</param>
            <returns>A function that will round the expression (using midpoint rounding)</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Round(Couchbase.Lite.Query.IExpression,Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will round the given expression to the number of digits indicated
            in question
            </summary>
            <param name="expression">The numeric expression to take data from when calculating
            the result</param>
            <param name="digits">The number of digits to round to</param>
            <returns>A function that will round the expression (using midpoint rounding)</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Rtrim(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that removes whitespace from the end of a string
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that removes whitespace from the end of a string</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Sign(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that returns the sign (positive, negative, or neither) of
            the expression in question
            </summary>
            <param name="expression">The numeric expression to evaluate</param>
            <returns>A function that returns the sign of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Sin(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that returns the sin of the expression in question
            </summary>
            <param name="expression">The numeric expression to evaluate</param>
            <returns>A function that returns the sin of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Sqrt(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that returns the square root of the expression in question
            </summary>
            <param name="expression">The numeric expression to evaluate</param>
            <returns>A function that returns the square root of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.StringToMillis(Couchbase.Lite.Query.IExpression)">
             <summary>
             Creates a function that will convert an ISO8601 datetime string
             into the number of milliseconds since the unix epoch.
             </summary>
             <param name="expression">The expression to take data from when converting</param>
             <returns>A function that will convert the string to a timestamp</returns>
             <remarks>
             Valid date strings must start with a date in the form YYYY-MM-DD (time
             only strings are not supported).
            
             Times can be of the form HH:MM, HH:MM:SS, or HH:MM:SS.FFF.  Leading zero is
             not optional (i.e. 02 is ok, 2 is not).  Hours are in 24-hour format.  FFF
             represents milliseconds, and *trailing* zeros are optional (i.e. 5 == 500).
            
             Time zones can be in one of three forms:
             (+/-)HH:MM
             (+/-)HHMM
             Z (which represents UTC)
            
             No time zone present will default to the device local time zone
             </remarks>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.StringToUTC(Couchbase.Lite.Query.IExpression)">
             <summary>
             Creates a function that will convert an ISO8601 datetime string
             into a full ISO8601 UTC datetime string.
             </summary>
             <param name="expression">The expression to take data from when converting</param>
             <returns>A function that will convert the string to a timestamp</returns>
             <remarks>
             Valid date strings must start with a date in the form YYYY-MM-DD (time
             only strings are not supported).
            
             Times can be of the form HH:MM, HH:MM:SS, or HH:MM:SS.FFF.  Leading zero is
             not optional (i.e. 02 is ok, 2 is not).  Hours are in 24-hour format.  FFF
             represents milliseconds, and *trailing* zeros are optional (i.e. 5 == 500).
            
             Time zones can be in one of three forms:
             (+/-)HH:MM
             (+/-)HHMM
             Z (which represents UTC)
            
             No time zone present will default to the device local time zone
             </remarks>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Sum(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will calculate the sum of the
            expression in question across the results in a particular query
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that will calculate the sum</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Tan(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that returns the tangent of the expression in question
            </summary>
            <param name="expression">The numeric expression to evaluate</param>
            <returns>A function that returns the tangent of the expression in question</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Trim(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that removes whitespace from the start and end of a string
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that removes whitespace from the start and end of a string</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Trunc(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will truncate the given expression (i.e remove all the
            digits after the decimal place)
            in question
            </summary>
            <param name="expression">The numeric expression to take data from when calculating
            the result</param>
            <returns>A function that will truncate the expressoin</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Trunc(Couchbase.Lite.Query.IExpression,Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that will truncate the given expression to the number of digits indicated
            in question
            </summary>
            <param name="expression">The numeric expression to take data from when calculating 
            the result</param>
            <param name="digits">The number of digits to truncate to</param>
            <returns>A function that will truncate the expression</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Function.Upper(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a function that converts a string to upper case
            </summary>
            <param name="expression">The expression to take data from when calculating
            the result</param>
            <returns>A function that converts a string to upper case</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IArrayExpressionIn">
            <summary>
            An interface that represents a portion of a query that chooses
            a collection to be used in a query of each of its elements
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IArrayExpressionIn.In(Couchbase.Lite.Query.IExpression)">
            <summary>
            Chooses a collection to be used in a query of each of
            its elements
            </summary>
            <param name="expression">An expression that evaluates to a collection type</param>
            <returns>An object that will determine the predicate for the contents
            of the collection</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IArrayExpressionSatisfies">
            <summary>
            An interface representing an object that can accept a predicate to use
            on each item in a collection
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IArrayExpressionSatisfies.Satisfies(Couchbase.Lite.Query.IExpression)">
            <summary>
            Accepts a predicate to apply to each item of a collection
            received from <see cref="T:Couchbase.Lite.Query.IArrayExpressionIn"/>
            </summary>
            <param name="expression">The predicate expression to apply</param>
            <returns>The overall expression for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.ICollation">
            <summary>
            A base interface for different collations
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IASCIICollation">
            <summary>
            An interface that can use 7-bit ASCII rules to do string collation
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IASCIICollation.IgnoreCase(System.Boolean)">
            <summary>
            Instructs the object to either ignore lowercase vs uppercase when collating
            or consider it (default is to consider)
            </summary>
            <param name="ignoreCase">Whether or not to ignore casing</param>
            <returns>The collation object for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IUnicodeCollation">
            <summary>
            An interface that can use Unicode rules (http://unicode.org/reports/tr10/)
            to do string collation
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IUnicodeCollation.IgnoreCase(System.Boolean)">
            <summary>
            Instructs the object to either ignore lowercase vs uppercase when collating
            or consider it (default is to consider)
            </summary>
            <param name="ignoreCase">Whether or not to ignore casing</param>
            <returns>The collation object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IUnicodeCollation.IgnoreAccents(System.Boolean)">
            <summary>
            Instructs the object to either diacritics (e.g. accents) when collating
            or consider it (default is to consider)
            </summary>
            <param name="ignoreAccents">Whether or not to ignore diacritics</param>
            <returns>The collation object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IUnicodeCollation.Locale(System.String)">
            <summary>
            Sets the locale to use when applying the collation rules
            </summary>
            <param name="locale">The POSIX locale code (ISO-639 language code 
            plus an optional underbar [_] and ISO-3166 country code.  Example: 
            'en', 'en_US', 'fr_CA', etc)</param>
            <returns>The collation object for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IDataSource">
            <summary>
            An interface representing the source of data for a query
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IDataSourceAs">
            <summary>
            An interface representing a source of data that comes from
            an <see cref="T:Couchbase.Lite.Database"/>
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IDataSourceAs.As(System.String)">
            <summary>
            Attaches an alias to a given data source
            </summary>
            <param name="alias">The alias to attach</param>
            <returns>The datasource, for further operations</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IExpression">
            <summary>
            An interface representing an abstract expression that can act on
            a given piece of data
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Add(Couchbase.Lite.Query.IExpression)">
            <summary>
            Mathematically adds the given expression to the current expression
            </summary>
            <param name="expression">The expression to add</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.And(Couchbase.Lite.Query.IExpression)">
            <summary>
            Logically "ands" the given expression with the current expression
            </summary>
            <param name="expression">The expression to "and"</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Between(Couchbase.Lite.Query.IExpression,Couchbase.Lite.Query.IExpression)">
            <summary>
            Determines if the result is between the two given expressions
            </summary>
            <param name="expression1">The expression to use as the first bound</param>
            <param name="expression2">The expression to use as the second bound</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Collate(Couchbase.Lite.Query.ICollation)">
            <summary>
            Collates the previous expression using the given collation instance (normally 
            this is used directly after <see cref="M:Couchbase.Lite.Query.Expression.Property(System.String)"/> when
            it is part of a <see cref="M:Couchbase.Lite.Query.IWhereRouter.Where(Couchbase.Lite.Query.IExpression)"/> or 
            <see cref="M:Couchbase.Lite.Query.IOrderByRouter.OrderBy(Couchbase.Lite.Query.IOrdering[])"/>)
            </summary>
            <param name="collation">The collation instance to use when collating</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Divide(Couchbase.Lite.Query.IExpression)">
            <summary>
            Matehematically divides the current and given expressions
            </summary>
            <param name="expression">The expression to divide</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.EqualTo(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression that will evaluate whether or not the given
            and current expression are equal
            </summary>
            <param name="expression">The expression to compare with the current one</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.GreaterThan(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression that will evaluate whether or not the given
            expression is greater than the current one
            </summary>
            <param name="expression">The expression to compare with the current one</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.GreaterThanOrEqualTo(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression that will evaluate whether or not the given
            expression is greater than or equal to the current one
            </summary>
            <param name="expression">The expression to compare with the current one</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.In(Couchbase.Lite.Query.IExpression[])">
            <summary>
            Returns an expression to test whether or not the given expression is contained
            in the given list of expressions
            </summary>
            <param name="expressions">The list of expressions to check</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Is(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression to test whether or not the given expression is
            the same as the current current expression
            </summary>
            <param name="expression">The expression to compare to</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.IsNot(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression to test whether or not the given expression is
            NOT the same as the current current expression
            </summary>
            <param name="expression">The expression to compare to</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.IsNullOrMissing">
            <summary>
            Gets an expression representing if the current expression is null
            or missing (i.e. does not have a value)
            </summary>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.LessThan(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression that will evaluate whether or not the given
            expression is less than the current one
            </summary>
            <param name="expression">The expression to compare with the current one</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.LessThanOrEqualTo(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression that will evaluate whether or not the given
            expression is less than or equal to the current one
            </summary>
            <param name="expression">The expression to compare with the current one</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Like(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression that will evaluate whether or not the given
            expression is "LIKE" the current one
            </summary>
            <param name="expression">The expression to compare with the current one</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Modulo(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an modulo math expression using the current and given expressions
            as operands
            </summary>
            <param name="expression">The expression to mod with the current one</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Multiply(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns a multiply expression using the current and given expressions as 
            operands
            </summary>
            <param name="expression">The expression to multiply with the current one</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.NotEqualTo(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression that will evaluate whether or not the given
            and current expression are not equal
            </summary>
            <param name="expression">The expression to compare with the current one</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.NotNullOrMissing">
            <summary>
            Gets an expression representing if the current expression is neither null
            nor missing (i.e. has a value)
            </summary>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Or(Couchbase.Lite.Query.IExpression)">
            <summary>
            Logically "ors" the given expression with the current expression
            </summary>
            <param name="expression">The expression to "and"</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Regex(Couchbase.Lite.Query.IExpression)">
            <summary>
            Returns an expression that will evaluate whether or not the given
            expression regex matches the current one
            </summary>
            <param name="expression">The expression to compare with the current one</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IExpression.Subtract(Couchbase.Lite.Query.IExpression)">
            <summary>
            Mathematically subtracts the given expression to the current expression
            </summary>
            <param name="expression">The expression to subtract</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IFrom">
            <summary>
            An interface representing the FROM portion of an <see cref="T:Couchbase.Lite.Query.IQuery"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IFromRouter">
            <summary>
            An interface representing a portion of a query that can be routed
            to a FROM portion
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IFromRouter.From(Couchbase.Lite.Query.IDataSource)">
            <summary>
            Routes this IExpression to the nexe FROM portion of a query
            </summary>
            <param name="dataSource">The data source to use in the FROM portion of the query</param>
            <returns>The next FROM portion of the query for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IFullTextExpression">
            <summary>
            An interface that represents an expression that is eligible to receive
            full-text related query clauses
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IFullTextExpression.Match(System.String)">
            <summary>
            Returns an expression that will evaluate whether or not the given
            expression full text matches the current one
            </summary>
            <param name="query">The text to use for the match operation</param>
            <returns>The expression representing the new operation</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IGroupBy">
            <summary>
            An interface representing the GROUP BY portion of a query
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IGroupByRouter">
            <summary>
            An interface representing a portion of a query which can take GROUP BY
            as its next step
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IGroupByRouter.GroupBy(Couchbase.Lite.Query.IExpression[])">
            <summary>
            Groups the current query by the given GROUP BY clauses
            </summary>
            <param name="expressions">The clauses to group by</param>
            <returns>The query grouped by the given clauses for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IHaving">
            <summary>
            An interface representing the HAVING portion of a query (i.e. WHERE clause
            intended for a GROUP BY clause)
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IHavingRouter">
            <summary>
            An interface representing a portion of a query that can take HAVING
            as its next step
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IHavingRouter.Having(Couchbase.Lite.Query.IExpression)">
            <summary>
            Adds the given expression as a HAVING clause onto this query
            </summary>
            <param name="expression">The expression to use in the HAVING clause</param>
            <returns>The query with the new clause for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IIndex">
            <summary>
            The base interface for an index in a <see cref="T:Couchbase.Lite.Database"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IValueIndex">
            <summary>
            An interface for an index based on a simple property value
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IFullTextIndex">
            <summary>
            An interface for an index based on full text searching
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IFullTextIndex.IgnoreAccents(System.Boolean)">
            <summary>
            Sets whether or not to ignore accents when performing 
            the full text search
            </summary>
            <param name="ignoreAccents">Whether or not to ignore accents</param>
            <returns>The index for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IFullTextIndex.SetLanguage(System.String)">
            <summary>
            Sets the locale to use when performing full text searching
            </summary>
            <param name="language">The language code in the form of ISO-639 language code</param>
            <returns>The index for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IValueIndexItem">
            <summary>
            An interface for an index item for use when creating value based indexes
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IFullTextIndexItem">
            <summary>
            An interface for an index item for use when creating FTS based indexes
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IJoins">
            <summary>
            An interface representing a query that has just received a JOIN
            clause
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IJoin">
            <summary>
            An interface representing an <see cref="T:Couchbase.Lite.Query.IQuery"/> with a JOIN clause
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IJoinOn">
            <summary>
            An interface representing an <see cref="T:Couchbase.Lite.Query.IQuery"/> with a 
            partially constructed JOIN clause that has not yet received its ON clause
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IJoinOn.On(Couchbase.Lite.Query.IExpression)">
            <summary>
            Adds the ON clause to the current JOIN clause
            </summary>
            <param name="expression">The expression to use as the ON clause</param>
            <returns>The query for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IJoinRouter">
            <summary>
            An interface representing a portion of an <see cref="T:Couchbase.Lite.Query.IQuery"/> that can accept JOIN
            as its next clause
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IJoinRouter.Join(Couchbase.Lite.Query.IJoin[])">
            <summary>
            Create and appends the list of JOINS to the current <see cref="T:Couchbase.Lite.Query.IQuery"/>
            </summary>
            <param name="joins">The join clauses to add</param>
            <returns>The query with the join statement, for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.ILimit">
            <summary>
            An interface representing a query that has had a limit and optionally an
            offset applied
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.ILimitRouter">
            <summary>
            An interface representing a query that can accept LIMIT as its next clause
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.ILimitRouter.Limit(Couchbase.Lite.Query.IExpression)">
            <summary>
            Limits a query to the given count (ulong, parameter, etc)
            </summary>
            <param name="limit">The amount to limit the query to</param>
            <returns>The query for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.ILimitRouter.Limit(Couchbase.Lite.Query.IExpression,Couchbase.Lite.Query.IExpression)">
            <summary>
            Limits a query to the given count and also offsets it by
            a given count (ulong, parameter, etc)
            </summary>
            <param name="limit">The amount to limit the query to</param>
            <param name="offset">The amount to offset the query by</param>
            <returns>The query for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IMetaExpression">
            <summary>
            Represents an expression that is meant to retrieve metadata information
            inside of an <see cref="T:Couchbase.Lite.Query.IQuery"/>
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IMetaExpression.From(System.String)">
            <summary>
            Specifies the source to retrieve the information from
            if multiple sources are used in a query
            </summary>
            <param name="alias">The name of the data source</param>
            <returns>The expression with the alias added</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IndexBuilder">
            <summary>
            A factory class for creating <see cref="T:Couchbase.Lite.Query.IIndex"/> instances
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IndexBuilder.ValueIndex(Couchbase.Lite.Query.IValueIndexItem[])">
            <summary>
            Starts the creation of an index based on a simple property
            </summary>
            <param name="items">The items to use to create the index</param>
            <returns>The beginning of a value based index</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IndexBuilder.FullTextIndex(Couchbase.Lite.Query.IFullTextIndexItem[])">
            <summary>
            Starts the creation of an index based on a full text search
            </summary>
            <param name="items">The items to use to create the index</param>
            <returns>The beginning of an FTS based index</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.ValueIndexItem">
            <summary>
            A factory class for creating <see cref="T:Couchbase.Lite.Query.IValueIndexItem"/> instances
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.ValueIndexItem.Property(System.String)">
            <summary>
            Creates a value index item based on a given property path
            </summary>
            <param name="property">The property path to base the index item on</param>
            <returns>The created index item</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.ValueIndexItem.Expression(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates a value index item based on a given <see cref="T:Couchbase.Lite.Query.IExpression"/>
            </summary>
            <param name="expression">The expression to base the index item on</param>
            <returns>The created index item</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.FullTextIndexItem">
            <summary>
            A factory class for creating <see cref="T:Couchbase.Lite.Query.IFullTextIndexItem"/> instances
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.FullTextIndexItem.Property(System.String)">
            <summary>
            Creates an FTS index item based on a given <see cref="T:Couchbase.Lite.Query.IExpression"/>
            </summary>
            <param name="property">The property name to base the index item on</param>
            <returns>The created index item</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IOrderBy">
            <summary>
            An interface representing the ORDER BY portion of an <see cref="T:Couchbase.Lite.Query.IQuery"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IOrdering">
            <summary>
            An interface representing an arbitrary sorting for an <see cref="T:Couchbase.Lite.Query.IOrderBy"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.ISortOrder">
            <summary>
            An interface representing the way that an <see cref="T:Couchbase.Lite.Query.IOrderBy"/> should be
            sorted
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.ISortOrder.Ascending">
            <summary>
            Returns an IExpression that will sort in ascending order
            </summary>
            <returns>An IExpression that will sort in ascending order</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.ISortOrder.Descending">
            <summary>
            Returns an IExpression that will sort in desecending order
            </summary>
            <returns>An IExpression that will sort in desecending order</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IOrderByRouter">
            <summary>
            An interface representing a portion of a query that can be routed
            to an ORDER BY portion
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IOrderByRouter.OrderBy(Couchbase.Lite.Query.IOrdering[])">
            <summary>
            Routes this IExpression to the next ORDER BY portion of the query
            </summary>
            <param name="orderings">An array of order by operations to consider in the 
            ORDER BY portion of the query</param>
            <returns>The next ORDER BY portion of the query</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IPropertyExpression">
            <summary>
            An interface for an expression that will retrieve a property
            from a keypath
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IPropertyExpression.From(System.String)">
            <summary>
            Specifies where to retrieve the property from (necessary
            in instances where the query is coming from multiple sources)
            </summary>
            <param name="alias">The alias of the source to retrieve from</param>
            <returns>The expression, for further processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.QueryChangedEventArgs">
            <summary>
            Arguments for the <see cref="M:Couchbase.Lite.Query.IQuery.AddChangeListener(System.Threading.Tasks.TaskScheduler,System.EventHandler{Couchbase.Lite.Query.QueryChangedEventArgs})" /> event
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Query.QueryChangedEventArgs.Error">
            <summary>
            Gets the error that occurred, if any
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Query.QueryChangedEventArgs.Results">
            <summary>
            Gets the updated rows of the query
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IQuery">
            <summary>
            An interface representing a runnable query over a data source
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Query.IQuery.Parameters">
            <summary>
            Gets or sets the parameter collection for this query so that parameters may be
            added for substitution into the query API (via <see cref="M:Couchbase.Lite.Query.Expression.Parameter(System.String)"/>)
            </summary>
            <remarks>
            The returned collection is a copy, and must be reset onto the query instance.
            Doing so will trigger a re-run and update any listeners.
            </remarks>
        </member>
        <member name="M:Couchbase.Lite.Query.IQuery.AddChangeListener(System.Threading.Tasks.TaskScheduler,System.EventHandler{Couchbase.Lite.Query.QueryChangedEventArgs})">
            <summary>
            Adds a change listener to track when this query instance has a change in
            its results.  Adding the first change listener will begin the live semantics.
            </summary>
            <param name="scheduler">The scheduler to use when firing events</param>
            <param name="handler">The handler to call when the query result set changes</param>
            <returns>A token that can be used to remove the listener later</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IQuery.AddChangeListener(System.EventHandler{Couchbase.Lite.Query.QueryChangedEventArgs})">
            <summary>
            Adds a change listener to track when this query instance has a change in
            its results.  Adding the first change listener will begin the live semantics.
            </summary>
            <param name="handler">The handler to call when the query result set changes</param>
            <returns>A token that can be used to remove the listener later</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.IQuery.RemoveChangeListener(Couchbase.Lite.ListenerToken)">
            <summary>
            Removes a changes listener based on the token that was received from
            <see cref="M:Couchbase.Lite.Query.IQuery.AddChangeListener(System.Threading.Tasks.TaskScheduler,System.EventHandler{Couchbase.Lite.Query.QueryChangedEventArgs})"/>
            </summary>
            <param name="token">The received token from adding the change listener</param>
        </member>
        <member name="M:Couchbase.Lite.Query.IQuery.Execute">
            <summary>
            Runs the query
            </summary>
            <returns>The results of running the query</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if this query has
            no database to operate on, or if it is missing SELECT or FROM statements (unusual)</exception>
        </member>
        <member name="M:Couchbase.Lite.Query.IQuery.Explain">
            <summary>
            Gets an explanation of what the query will do
            </summary>
            <returns>The explanation of the query</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if this method is
            called after disposal</exception>
        </member>
        <member name="T:Couchbase.Lite.Query.IResultSet">
            <summary>
            An interface representing an enumerable collection of results
            from a given <see cref="T:Couchbase.Lite.Query.IQuery"/>.
            </summary>
            <warning>
            Multiple enumerations are not supported.  If you wish to enumerate
            more than once, then use <see cref="M:Couchbase.Lite.Query.IResultSet.AllResults"/> or another LINQ
            method to materialize the results.
            </warning>
        </member>
        <member name="M:Couchbase.Lite.Query.IResultSet.AllResults">
            <summary>
            Cross platform API entry to get all results in a list.  Same
            as <c>ToList()</c>
            </summary>
            <returns>A list of results from the result set</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.ISelect">
            <summary>
            An interface representing the SELECT portion of an <see cref="T:Couchbase.Lite.Query.IQuery"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.ISelectResult">
            <summary>
            An interface that holds information about what to
            select out of an <see cref="T:Couchbase.Lite.Query.IQuery"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.ISelectResultFrom">
            <summary>
            An interface representing a select result "FROM" a certain data
            source
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.ISelectResultFrom.From(System.String)">
            <summary>
            Specifies the source of this select result
            </summary>
            <param name="alias">The alias of the data source to select from</param>
            <returns>The modified select result</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.ISelectResultAs">
            <summary>
            An interface reprsenting a select result that can be aliased to
            an arbitrary name
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.ISelectResultAs.As(System.String)">
            <summary>
            Adds an alias to the select result
            </summary>
            <param name="alias">The alias to assign to the select result</param>
            <returns>The modified select result</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.IVariableExpression">
            <summary>
            A type of expression that represents the variable portion of an
            array based expression such as <see cref="M:Couchbase.Lite.Query.ArrayExpression.Any(Couchbase.Lite.Query.IVariableExpression)"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IWhere">
            <summary>
            An interface representing the WHERE portion of an <see cref="T:Couchbase.Lite.Query.IQuery"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.IWhereRouter">
            <summary>
            An interface representing a portion of a query that can be routed to
            a WHERE portion of the query.
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.IWhereRouter.Where(Couchbase.Lite.Query.IExpression)">
            <summary>
            Routes this portion of the query to the next WHERE portion of the
            query
            </summary>
            <param name="expression">The expression to evaluate in the WHERE portion</param>
            <returns>The next WHERE portion of the query</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.Join">
            <summary>
            A class for creating <see cref="T:Couchbase.Lite.Query.IJoin"/> instances
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.Join.CrossJoin(Couchbase.Lite.Query.IDataSource)">
            <summary>
            Creates a CROSS JOIN clause
            </summary>
            <param name="dataSource">The data source to JOIN with</param>
            <returns>An <see cref="T:Couchbase.Lite.Query.IJoinOn"/> instance for processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Join.InnerJoin(Couchbase.Lite.Query.IDataSource)">
            <summary>
            Creates an INNER JOIN clause
            </summary>
            <param name="dataSource">The data source to JOIN with</param>
            <returns>An <see cref="T:Couchbase.Lite.Query.IJoinOn"/> instance for processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Join.LeftJoin(Couchbase.Lite.Query.IDataSource)">
            <summary>
            Synonym for <see cref="M:Couchbase.Lite.Query.Join.LeftOuterJoin(Couchbase.Lite.Query.IDataSource)"/>
            </summary>
            <param name="dataSource">The data source to JOIN with</param>
            <returns>An <see cref="T:Couchbase.Lite.Query.IJoinOn"/> instance for processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Join.LeftOuterJoin(Couchbase.Lite.Query.IDataSource)">
            <summary>
            Creates a LEFT OUTER JOIN clause
            </summary>
            <param name="dataSource">The data source to JOIN with</param>
            <returns>An <see cref="T:Couchbase.Lite.Query.IJoinOn"/> instance for processing</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.Meta">
            <summary>
            A class that generates expressions for retrieving metadata
            during a query
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Query.Meta.ID">
            <summary>
            A query expression that retrieves the document ID from 
            an entry in the database
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Query.Meta.Sequence">
            <summary>
            A query expression that retrieves the document sequence from
            an entry in the database
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Query.Meta.IsDeleted">
            <summary>
            A metadata expression refering to the deleted boolean flag of the document.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Query.Meta.Expiration">
            <summary>
            A metadata expression refering to the expiration date of the document.
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Query.Ordering">
            <summary>
            A factory class for generating <see cref="T:Couchbase.Lite.Query.ISortOrder"/> objects
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.Ordering.Expression(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates an object that will sort based on the given expression
            </summary>
            <param name="expression">The expression to use when sorting</param>
            <returns>The object that will perform the sort</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Ordering.Property(System.String)">
            <summary>
            Creates an object that will sort based on the value in the given
            property path
            </summary>
            <param name="property">The path of the property whose value will be used
            to sort the results of the query</param>
            <returns>The object that will perform the sort</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.Parameters">
            <summary>
            A class which contains parameters for an <see cref="T:Couchbase.Lite.Query.IQuery"/>
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.#ctor(Couchbase.Lite.Query.Parameters)">
            <summary>
            Copy constructor
            </summary>
            <param name="parameters">The object to copy values from</param>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.GetValue(System.String)">
            <summary>
            Gets the untyped value of the given key in the parameters
            </summary>
            <param name="key">The key to lookup</param>
            <returns>The value of the key, or <c>null</c> if it does not exist</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.SetBlob(System.String,Couchbase.Lite.Blob)">
            <summary>
            Sets a <see cref="T:Couchbase.Lite.Blob"/> value in the parameters
            </summary>
            <param name="name">The name of the key to set</param>
            <param name="value">The value to set</param>
            <returns>The parameters object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.SetBoolean(System.String,System.Boolean)">
            <summary>
            Sets a <see cref="T:System.Boolean"/> value in the parameters
            </summary>
            <param name="name">The name of the key to set</param>
            <param name="value">The value to set</param>
            <returns>The parameters object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.SetDate(System.String,System.DateTimeOffset)">
            <summary>
            Sets a <see cref="T:System.DateTimeOffset"/> value in the parameters
            </summary>
            <param name="name">The name of the key to set</param>
            <param name="value">The value to set</param>
            <returns>The parameters object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.SetDouble(System.String,System.Double)">
            <summary>
            Sets a <see cref="T:System.Double"/> value in the parameters
            </summary>
            <param name="name">The name of the key to set</param>
            <param name="value">The value to set</param>
            <returns>The parameters object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.SetFloat(System.String,System.Single)">
            <summary>
            Sets a <see cref="T:System.Single"/> value in the parameters
            </summary>
            <param name="name">The name of the key to set</param>
            <param name="value">The value to set</param>
            <returns>The parameters object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.SetInt(System.String,System.Int32)">
            <summary>
            Sets an <see cref="T:System.Int32"/> value in the parameters
            </summary>
            <param name="name">The name of the key to set</param>
            <param name="value">The value to set</param>
            <returns>The parameters object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.SetLong(System.String,System.Int64)">
            <summary>
            Sets an <see cref="T:System.Int64"/> value in the parameters
            </summary>
            <param name="name">The name of the key to set</param>
            <param name="value">The value to set</param>
            <returns>The parameters object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.SetString(System.String,System.String)">
            <summary>
            Sets a <see cref="T:System.String"/> value in the parameters
            </summary>
            <param name="name">The name of the key to set</param>
            <param name="value">The value to set</param>
            <returns>The parameters object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.SetValue(System.String,System.Object)">
            <summary>
            Sets an untyped value in the parameters
            </summary>
            <param name="name">The name of the key to set</param>
            <param name="value">The value to set</param>
            <returns>The parameters object for further processing</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.Parameters.ToString">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.Query.QueryBuilder">
            <summary>
            A factory class for generating the initial portion of a query
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.QueryBuilder.Select(Couchbase.Lite.Query.ISelectResult[])">
            <summary>
            Selects the given property path from the query under construction
            </summary>
            <param name="results">The results to select</param>
            <returns>The initial SELECT portion of the query</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.QueryBuilder.SelectDistinct(Couchbase.Lite.Query.ISelectResult[])">
            <summary>
            Selects only the distinct results of the query
            </summary>
            <param name="results">The results to select</param>
            <returns>The initial SELECT portion of the query</returns>
        </member>
        <member name="T:Couchbase.Lite.Query.Result">
            <summary>
            A class representing information about a "row" in the result of an
            <see cref="T:Couchbase.Lite.Query.IQuery"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Query.Result.Count">
            <summary>
            Gets the number of entries in the result
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Query.Result.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.Query.Result.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.Query.Result.Keys">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetArray(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetBlob(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetBoolean(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetDate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetDictionary(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetDouble(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetFloat(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetInt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetLong(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetValue(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetString(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.ToList">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.Contains(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetArray(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetBlob(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetBoolean(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetDate(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetDictionary(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetDouble(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetFloat(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetInt(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetLong(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetValue(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.GetString(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Query.Result.ToDictionary">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.Query.SelectResult">
            <summary>
            A class for generating instances of <see cref="T:Couchbase.Lite.Query.ISelectResult"/>.  This *will*
            be expanded on in the near future.
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Query.SelectResult.Expression(Couchbase.Lite.Query.IExpression)">
            <summary>
            Creates an instance based on the given expression
            </summary>
            <param name="expression">The expression describing what to select from the
            query (e.g. <see cref="M:Couchbase.Lite.Query.Expression.Property(System.String)"/>)</param>
            <returns>The instantiated instance</returns>
        </member>
        <member name="M:Couchbase.Lite.Query.SelectResult.Property(System.String)">
            <summary>
            Creates an instanced based on a given property path
            </summary>
            <param name="property">The property path to select</param>
            <returns>The instantiated instance</returns>
            <remarks>Equivalent to <c>SelectResult.Expression(Expression.Property(property))</c></remarks>
        </member>
        <member name="M:Couchbase.Lite.Query.SelectResult.All">
            <summary>
            Creates a select result instance that will return all of the
            data in the retrieved document
            </summary>
            <returns>The instantiated instance</returns>
        </member>
        <member name="T:Couchbase.Lite.RuntimeException">
            <summary>
            An exception that is thrown in rare circumstances where the runtime returns
            an unexpected value for a method (usually null)
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.Authenticator">
            <summary>
            An abstract base class for authenticator classes.  This class
            has no public methods.
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.BasicAuthenticator">
            <summary>
            An object that will authenticate a <see cref="T:Couchbase.Lite.Sync.Replicator"/> using
            HTTP Basic authentication
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.BasicAuthenticator.Password">
            <summary>
            Gets the username that this object holds
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.BasicAuthenticator.Username">
            <summary>
            Gets the password that this object holds
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.BasicAuthenticator.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="username">The username to send through HTTP Basic authentication</param>
            <param name="password">The password to send through HTTP Basic authentication</param>
        </member>
        <member name="T:Couchbase.Lite.Sync.IEndpoint">
            <summary>
            Represents an endpoint in a replication
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.ReplicatorActivityLevel">
            <summary>
            An enum describing states for a <see cref="T:Couchbase.Lite.Sync.Replicator"/>
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorActivityLevel.Stopped">
            <summary>
            The replication is finished or hit a fatal error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorActivityLevel.Offline">
            <summary>
            The replicator has detected that there is no Internet connection available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorActivityLevel.Connecting">
            <summary>
            The replicator is connecting to the remote host
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorActivityLevel.Idle">
            <summary>
            The replication is inactive; either waiting for changes or offline
            because the remote host is unreachable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorActivityLevel.Busy">
            <summary>
            The replication is actively transferring data
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.Replicator">
            <summary>
            An object that is responsible for the replication of data between two
            endpoints.  The replication can set up to be pull only, push only, or both
            (i.e. pusher and puller are no longer separate) between a database and a URL
            or a database and another database on the same filesystem.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.Replicator.Config">
            <summary>
            Gets the configuration that was used to create this Replicator
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.Replicator.Status">
            <summary>
            Gets the current status of the <see cref="T:Couchbase.Lite.Sync.Replicator"/>
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.#ctor(Couchbase.Lite.Sync.ReplicatorConfiguration)">
            <summary>
            Constructs a replicator based on the given <see cref="T:Couchbase.Lite.Sync.ReplicatorConfiguration"/>
            </summary>
            <param name="config">The configuration to use to create the replicator</param>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.AddChangeListener(System.EventHandler{Couchbase.Lite.Sync.ReplicatorStatusChangedEventArgs})">
            <summary>
            Adds a change listener on this replication object (similar to a C# event)
            </summary>
            <param name="handler">The logic to run during the callback</param>
            <returns>A token to remove the handler later</returns>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.AddChangeListener(System.Threading.Tasks.TaskScheduler,System.EventHandler{Couchbase.Lite.Sync.ReplicatorStatusChangedEventArgs})">
            <summary>
            Adds a change listener on this replication object (similar to a C# event, but
            with the ability to specify a <see cref="T:System.Threading.Tasks.TaskScheduler"/> to schedule the 
            handler to run on)
            </summary>
            <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to run the <c>handler</c> on
            (<c>null</c> for default)</param>
            <param name="handler">The logic to run during the callback</param>
            <returns>A token to remove the handler later</returns>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.AddDocumentReplicationListener(System.EventHandler{Couchbase.Lite.Sync.DocumentReplicationEventArgs})">
            <summary>
            Adds a documents ended listener on this replication object (similar to a C# event)
            </summary>
            <param name="handler">The logic to run during the callback</param>
            <returns>A token to remove the handler later</returns>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.AddDocumentReplicationListener(System.Threading.Tasks.TaskScheduler,System.EventHandler{Couchbase.Lite.Sync.DocumentReplicationEventArgs})">
            <summary>
            Adds a document ended listener on this replication object (similar to a C# event, but
            with the ability to specify a <see cref="T:System.Threading.Tasks.TaskScheduler"/> to schedule the 
            handler to run on)
            </summary>
            <param name="scheduler">The <see cref="T:System.Threading.Tasks.TaskScheduler"/> to run the <c>handler</c> on
            (<c>null</c> for default)</param>
            <param name="handler">The logic to run during the callback</param>
            <returns>A token to remove the handler later</returns>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.RemoveChangeListener(Couchbase.Lite.ListenerToken)">
            <summary>
            Removes a previously added change listener via its <see cref="T:Couchbase.Lite.ListenerToken"/> and/or
            Removes a previously added documents ended listener via its <see cref="T:Couchbase.Lite.ListenerToken"/>
            </summary>
            <param name="token">The token received from <see cref="M:Couchbase.Lite.Sync.Replicator.AddChangeListener(System.Threading.Tasks.TaskScheduler,System.EventHandler{Couchbase.Lite.Sync.ReplicatorStatusChangedEventArgs})"/>
            and/or The token received from <see cref="M:Couchbase.Lite.Sync.Replicator.AddDocumentReplicationListener(System.Threading.Tasks.TaskScheduler,System.EventHandler{Couchbase.Lite.Sync.DocumentReplicationEventArgs})"/></param>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.ResetCheckpoint">
            <summary>
            Resets the local checkpoint of the replicator, meaning that it will read all changes since the beginning
            of time from the remote database.  This can only be called when the replicator is in a stopped state.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called while the replicator is
            not in a stopped state</exception>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.Start">
            <summary>
            Starts the replication
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.Stop">
            <summary>
            Stops the replication
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.ToString">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Sync.Replicator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.Sync.ReplicatorType">
            <summary>
            An enum representing the direction of a <see cref="T:Couchbase.Lite.Sync.Replicator"/>
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorType.Push">
            <summary>
            The replication will push data from local to remote
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorType.Pull">
            <summary>
            The replication will pull data from remote to local
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorType.PushAndPull">
            <summary>
            The replication will operate in both directions
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.DocumentFlags">
            <summary>
            A set of flags describing the properties of a replicated
            document.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.DocumentFlags.Deleted">
            <summary>
            The replication action represents a deletion of the
            document in question
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.DocumentFlags.AccessRemoved">
            <summary>
            The replication action represents a loss of access from
            the server for the document in question (i.e. no more access
            granted from the sync function)
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.ReplicatorProgressLevel">
            <summary>
            An enum representing level of opt in on progress of replication
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorProgressLevel.Overall">
            <summary>
            No additional replication progress callback
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorProgressLevel.PerDocument">
            <summary>
            Every document replication ended callback
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.ReplicatorProgressLevel.PerAttachment">
            <summary>
            Every blob replication progress callback
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.ReplicatorConfiguration">
            <summary>
            A class representing configuration options for a <see cref="T:Couchbase.Lite.Sync.Replicator"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.Authenticator">
            <summary>
            Gets or sets the class which will authenticate the replication
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.Channels">
            <summary>
            A set of Sync Gateway channel names to pull from.  Ignored for push replicatoin.
            The default value is null, meaning that all accessible channels will be pulled.
            Note: channels that are not accessible to the user will be ignored by Sync Gateway.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.Continuous">
            <summary>
            Gets or sets whether or not the <see cref="T:Couchbase.Lite.Sync.Replicator"/> should stay
            active indefinitely.  The default is <c>false</c>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.Database">
            <summary>
            Gets the local database participating in the replication. 
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.DocumentIDs">
            <summary>
            A set of document IDs to filter by.  If not null, only documents with these IDs will be pushed
            and/or pulled
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.Headers">
            <summary>
            Extra HTTP headers to send in all requests to the remote target
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.PinnedServerCertificate">
            <summary>
            Gets or sets a certificate to trust.  All other certificates received
            by a <see cref="T:Couchbase.Lite.Sync.Replicator"/> with this configuration will be rejected.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.PullFilter">
            <summary>
            Func delegate that takes Document input parameter and bool output parameter
            Document pull will be allowed if output is true, othewise, Document pull 
            will not be allowed
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.PushFilter">
            <summary>
            Func delegate that takes Document input parameter and bool output parameter
            Document push will be allowed if output is true, othewise, Document push 
            will not be allowed
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.ReplicatorType">
            <summary>
            A value indicating the direction of the replication.  The default is
            <see cref="F:Couchbase.Lite.Sync.ReplicatorType.PushAndPull"/> which is bidirectional
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.Target">
            <summary>
            Gets the target to replicate with (either <see cref="P:Couchbase.Lite.Sync.ReplicatorConfiguration.Database"/>
            or <see cref="T:System.Uri"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorConfiguration.ConflictResolver">
            <summary>
            The implemented custom conflict resolver object can be registered to the replicator 
            at ConflictResolver property. The default value of the conflictResolver is null. 
            When the value is null, the default conflict resolution will be applied.
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.ReplicatorConfiguration.#ctor(Couchbase.Lite.Database,Couchbase.Lite.Sync.IEndpoint)">
            <summary>
            Constructs a new builder object with the required properties
            </summary>
            <param name="database">The database that will serve as the local side of the replication</param>
            <param name="target">The endpoint to replicate to, either local or remote</param>
            <exception cref="T:System.ArgumentException">Thrown if an unsupported <see cref="T:Couchbase.Lite.Sync.IEndpoint"/> implementation
            is provided as <paramref name="target"/></exception>
        </member>
        <member name="T:Couchbase.Lite.Sync.ReplicatorProgress">
            <summary>
            A struct describing the current progress of a <see cref="T:Couchbase.Lite.Sync.Replicator"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorProgress.Completed">
            <summary>
            Gets the number of changes that have finished processing
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorProgress.Total">
            <summary>
            Gets the current count of changes that have been received for
            processing
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.ReplicatedDocument">
            <summary>
            A struct describing the current <see cref="T:Couchbase.Lite.Document"/> ended progress 
            of a <see cref="T:Couchbase.Lite.Sync.Replicator"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatedDocument.Flags">
            <summary>
            Gets the special flags, if any, for this replicated document
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatedDocument.Id">
            <summary>
            Gets the document ID of the document that was replicated
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatedDocument.Error">
            <summary>
            Gets the error that occurred during replication, if any.
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.ReplicatedDocument.ToString">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.Sync.ReplicatorStatus">
            <summary>
            A struct describing the current status of a <see cref="T:Couchbase.Lite.Sync.Replicator"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorStatus.Activity">
            <summary>
            Gets the current state of the replication (i.e. whether or not it is
            actively processing changes)
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorStatus.Progress">
            <summary>
            Gets the current progress of the replication
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorStatus.Error">
            <summary>
            Gets the last error that occurred, if any
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.ReplicatorStatusChangedEventArgs">
            <summary>
            Event arguments for the <see cref="M:Couchbase.Lite.Sync.Replicator.AddChangeListener(System.EventHandler{Couchbase.Lite.Sync.ReplicatorStatusChangedEventArgs})" /> event
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorStatusChangedEventArgs.Status">
            <summary>
            The new status for the <see cref="T:Couchbase.Lite.Sync.Replicator"/> in question.
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.DocumentReplicationEventArgs">
            <summary>
            Event arguments for the <see cref="M:Couchbase.Lite.Sync.Replicator.AddDocumentReplicationListener(System.EventHandler{Couchbase.Lite.Sync.DocumentReplicationEventArgs})" /> event
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.DocumentReplicationEventArgs.Documents">
            <summary>
            The new status for the <see cref="T:Couchbase.Lite.Sync.Replicator"/> in question.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.DocumentReplicationEventArgs.IsPush">
            <summary>
            Gets whether or not the replicated document was in
            a push replication (<c>false</c> means pull)
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.SessionAuthenticator">
            <summary>
            A class that will authenticate using a session cookie.  This can be used for things like
            Sync Gateway admin created sessions, or implicit authentication flow (e.g. OpenID Connect
            where the authentication is done already)
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.SessionAuthenticator.CookieName">
            <summary>
            Gets the name of the cookie to store the session in
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.SessionAuthenticator.SessionID">
            <summary>
            Gets the session ID to set as the cookie value
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.SessionAuthenticator.#ctor(System.String,System.String)">
            <summary>
            Constructor using the given cookie name
            </summary>
            <param name="sessionID"><see cref="P:Couchbase.Lite.Sync.SessionAuthenticator.SessionID"/></param>
            <param name="cookieName"><see cref="P:Couchbase.Lite.Sync.SessionAuthenticator.CookieName"/></param>
        </member>
        <member name="M:Couchbase.Lite.Sync.SessionAuthenticator.#ctor(System.String)">
            <summary>
            Constructor using the default cookie name for Sync Gateway ('SyncGatewaySession')
            </summary>
            <param name="sessionID"><see cref="P:Couchbase.Lite.Sync.SessionAuthenticator.SessionID"/></param>
        </member>
        <member name="T:Couchbase.Lite.Sync.URLEndpoint">
            <summary>
            Represents a remote endpoint for a <see cref="T:Couchbase.Lite.Sync.Replicator"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.URLEndpoint.Url">
            <summary>
            Gets the URL used to populate this endpoint
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.URLEndpoint.#ctor(System.Uri)">
            <summary>
            Constructs an endpoint given a url.  Note that the scheme must be ws or wss
            or an exception will be thrown
            </summary>
            <param name="url">The url </param>
            <exception cref="T:System.ArgumentException">Thrown if the url scheme is not ws or wss</exception>
        </member>
        <member name="M:Couchbase.Lite.Sync.URLEndpoint.ToString">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.Sync.AuthType">
            <summary>
            The type of authentication credentials that an <see cref="T:Couchbase.Lite.Sync.AuthOptionsDictionary"/>
            holds
            </summary>
        </member>
        <member name="F:Couchbase.Lite.Sync.AuthType.HttpBasic">
            <summary>
            HTTP Basic (RFC 2617)
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.AuthOptionsDictionary">
            <summary>
            A container that stores login information for authenticating with
            a remote endpoint
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.AuthOptionsDictionary.Password">
            <summary>
            Gets or sets the password for the credentials (not applicable in all cases)
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.AuthOptionsDictionary.Type">
            <summary>
            Gets or sets the type of authentication to be used
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.AuthOptionsDictionary.Username">
            <summary>
            Gets or sets the username to be used
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.AuthOptionsDictionary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Sync.ReplicatorOptionsDictionary">
            <summary>
             A container for options that have to do with a <see cref="T:Couchbase.Lite.Sync.Replicator"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorOptionsDictionary.Auth">
            <summary>
            Gets or sets the authentication parameters
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorOptionsDictionary.Channels">
            <summary>
            Gets or sets the channels to replicate (pull only)
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorOptionsDictionary.ClientCert">
            <summary>
            Gets or set the certificate to be used with client side
            authentication during TLS requests (optional)
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorOptionsDictionary.Cookies">
            <summary>
            Gets or sets a collection of cookie objects to be passed along
            with the initial HTTP request of the <see cref="T:Couchbase.Lite.Sync.Replicator"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorOptionsDictionary.DocIDs">
            <summary>
            Gets or sets the docIDs to replicate
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorOptionsDictionary.Filter">
            <summary>
            Gets or sets the filter to use when replicating
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorOptionsDictionary.FilterParams">
            <summary>
            Gets or sets the parameters that will be passed along with the filter
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorOptionsDictionary.Headers">
            <summary>
            Gets a mutable collection of headers to be passed along with the initial
            HTTP request that starts replication
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Sync.ReplicatorOptionsDictionary.PinnedServerCertificate">
            <summary>
            Gets or sets a certificate to trust.  All other certificates received
            by a <see cref="T:Couchbase.Lite.Sync.Replicator"/> with this configuration will be rejected.
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Sync.ReplicatorOptionsDictionary.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Internal.Logging.WriteLog">
            <summary>
            Centralized logging facility.
            </summary>
        </member>
        <member name="T:Couchbase.Lite.Util.Extensions">
            <summary>
            A collection of helpful extensions
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Util.Extensions.CastOrDefault``1(System.Object,``0)">
            <summary>
            Attempts to cast an object to a given type, and returning a default value if not successful
            </summary>
            <typeparam name="T">The type to cast the object to</typeparam>
            <param name="obj">The object to cast</param>
            <param name="defaultVal">The default value to use on failure</param>
            <returns>The cast object, or <c>defaultVal</c> if not successful</returns>
        </member>
        <member name="M:Couchbase.Lite.Util.Extensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            Attempts to get the value for a given key from a dictionary, returning the compiler
            default value if not successful
            </summary>
            <typeparam name="TKey">The key type of the dictionary</typeparam>
            <typeparam name="TValue">The value type of the dictionary</typeparam>
            <param name="d">The dictionary to operate on (implicit)</param>
            <param name="key">The key to attempt to retrieve the value for</param>
            <returns>The value for the given key, or a default value</returns>
        </member>
        <member name="M:Couchbase.Lite.Util.Extensions.Get``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
            <summary>
            Attempts to get the value for a given key from a dictionary, returning the compiler
            default value if not successful
            </summary>
            <typeparam name="TKey">The key type of the dictionary</typeparam>
            <typeparam name="TValue">The value type of the dictionary</typeparam>
            <param name="d">The dictionary to operate on (implicit)</param>
            <param name="key">The key to attempt to retrieve the value for</param>
            <returns>The value for the given key, or a default value</returns>
        </member>
        <member name="M:Couchbase.Lite.Util.Extensions.GetCast``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            Gets the value for the given key as the given type, or a default value
            if the value does not exist or is the incorrect type
            </summary>
            <typeparam name="T">The type to cast the result to</typeparam>
            <param name="collection">The dictionary to operate on (implicit)</param>
            <param name="key">The key to attempt to retrieve the value for</param>
            <param name="defaultVal">The value to return on failure</param>
            <returns>The fetched value, or the compiler default value if not successful</returns>
        </member>
        <member name="M:Couchbase.Lite.Util.Extensions.GetCast``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            Gets the value for the given key as the given type, or a default value
            if the value does not exist or is the incorrect type
            </summary>
            <typeparam name="T">The type to cast the result to</typeparam>
            <param name="collection">The dictionary to operate on (implicit)</param>
            <param name="key">The key to attempt to retrieve the value for</param>
            <param name="defaultVal">The value to return on failure</param>
            <returns>The fetched value, or the compiler default value if not successful</returns>
        </member>
        <member name="M:Couchbase.Lite.Util.Extensions.GetNumericType(System.Object,System.Object)">
            <summary>
            Gets the appropriate numeric type for comparing two untyped objects
            </summary>
            <param name="left">The lefthand object to compare</param>
            <param name="right">The righthand object to compare</param>
            <returns>The <see cref="T:System.TypeCode"/> of the type that best suits comparing
            the two object.  It can be either <see cref="F:System.TypeCode.UInt64"/>,
            <see cref="F:System.TypeCode.Int64"/>, <see cref="F:System.TypeCode.Single"/>,
            <see cref="F:System.TypeCode.Double"/> or <see cref="F:System.TypeCode.Object"/></returns>
        </member>
        <member name="M:Couchbase.Lite.Util.Extensions.RecursiveEqual(System.Object,System.Object)">
            <summary>
            Tests for equality between two untyped objects, and if they are collections
            recursively checks for equality on each entry.
            </summary>
            <param name="left">The lefthand object to compare</param>
            <param name="right">The righthand object to compare</param>
            <returns>Whether or not the two objects are equal</returns>
        </member>
        <member name="M:Couchbase.Lite.Util.Extensions.TryCast``1(System.Object,``0@)">
            <summary>
            Attempts to cast an object to a given type
            </summary>
            <typeparam name="T">The type to cast to</typeparam>
            <param name="obj">The object to operate on</param>
            <param name="castVal">An out value containing the cast object</param>
            <returns><c>true</c> if the object was cast, otherwise <c>false</c></returns>
        </member>
        <member name="M:Couchbase.Lite.Util.Extensions.TryGetValue``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Tries to get the value for the given key as the given type
            </summary>
            <typeparam name="T">The type to get the value as</typeparam>
            <param name="dic">The dictionary to operate on (implicit)</param>
            <param name="key">The key to attempt to retrieve the value for</param>
            <param name="value">The out parameter containing the cast value</param>
            <returns><c>true</c> if the value was found and cast, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Couchbase.Lite.Util.Extensions.TryGetValue``1(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.String,``0@)">
            <summary>
            Tries to get the value for the given key as the given type
            </summary>
            <typeparam name="T">The type to get the value as</typeparam>
            <param name="dic">The dictionary to operate on (implicit)</param>
            <param name="key">The key to attempt to retrieve the value for</param>
            <param name="value">The out parameter containing the cast value</param>
            <returns><c>true</c> if the value was found and cast, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Couchbase.Lite.Util.NonNullDictionary`2">
            <summary>
            A dictionary that ignores any attempts to insert a null object into it.
            Usefor for creating JSON objects that should not contain null values
            </summary>
        </member>
        <member name="P:Couchbase.Lite.Util.NonNullDictionary`2.Count">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.Util.NonNullDictionary`2.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.Util.NonNullDictionary`2.Item(`0)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.Util.NonNullDictionary`2.Keys">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.Util.NonNullDictionary`2.Values">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.Util.NonNullDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TK,TV}#Keys">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.Util.NonNullDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TK,TV}#Values">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Util.NonNullDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Util.NonNullDictionary`2.Clear">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Util.NonNullDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Util.NonNullDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Util.NonNullDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Util.NonNullDictionary`2.Add(`0,`1)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Util.NonNullDictionary`2.ContainsKey(`0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Util.NonNullDictionary`2.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Util.NonNullDictionary`2.TryGetValue(`0,`1@)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.Util.NonNullDictionary`2.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.Util.RefCountedDisposable">
            <summary>
            A utility base class that implements a referenced counted disposable
            object.  This object can be retained by calls to <see cref="M:Couchbase.Lite.Util.RefCountedDisposable.Retain"/>
            and must be Disposed an equal number of times, plus once more to balance
            the creation.  Each call to dispose will decrement the reference count and
            the final call will perform the disposal
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Util.RefCountedDisposable.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Util.RefCountedDisposable.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Util.RefCountedDisposable.Retain">
            <summary>
            Adds one to the reference count of the object, meaning that
            another call to <see cref="M:System.IDisposable.Dispose"/> is needed to actually
            dispose of this object
            </summary>
        </member>
        <member name="M:Couchbase.Lite.Util.RefCountedDisposable.Retain``1">
            <summary>
            Retains the object and returns it as a downcasted object
            </summary>
            <typeparam name="T">The type of object being returned</typeparam>
            <returns>The object that was retained</returns>
        </member>
        <member name="M:Couchbase.Lite.Util.RefCountedDisposable.Dispose(System.Boolean)">
            <summary>
            Performs the actual dispose
            </summary>
            <param name="disposing">Whether or not this method is being called from
            inside <see cref="M:System.IDisposable.Dispose"/> (vs the finalizer)</param>
        </member>
        <member name="M:Couchbase.Lite.Util.RefCountedDisposable.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.OptionsDictionary">
            <summary>
            An abstract base class for options dictionaries.  These dictionaries are simply
            dictionaries of <see cref="T:System.String"/> and <see cref="T:System.Object"/> but they provide 
            safe accessors to get the data without having to know the keys they are stored
            under
            </summary>
        </member>
        <member name="P:Couchbase.Lite.OptionsDictionary.Count">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.OptionsDictionary.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.OptionsDictionary.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.OptionsDictionary.Keys">
            <inheritdoc />
        </member>
        <member name="P:Couchbase.Lite.OptionsDictionary.Values">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.OptionsDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.OptionsDictionary.Clear">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.OptionsDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.OptionsDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.OptionsDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.OptionsDictionary.Add(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.OptionsDictionary.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.OptionsDictionary.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.OptionsDictionary.TryGetValue(System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="M:Couchbase.Lite.OptionsDictionary.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:Couchbase.Lite.CouchbaseLiteError">
            <summary>
            This set of error codes applies to <see cref="T:Couchbase.Lite.CouchbaseLiteException" />,
            <see cref="T:Couchbase.Lite.CouchbaseNetworkException"/> and <see cref="T:Couchbase.Lite.CouchbaseWebsocketException"/>
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.AssertionFailed">
            <summary>
            Internal assertion failure
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.Unimplemented">
            <summary>
            An unimplemented API call
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.UnsupportedEncryption">
            <summary>
            Unsupported encryption algorithm
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.BadRevisionID">
            <summary>
            An invalid revision ID was attempted to be used to insert a document
            (usually because of an invalid revision ID written directly into
            Sync Gateway via the REST API)
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.CorruptRevisionData">
            <summary>
            Revision contains corrupted/unreadable data
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.NotOpen">
            <summary>
            Database/KeyStore is not open
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.NotFound">
            <summary>
            Document not found
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.Conflict">
            <summary>
            Document update conflict
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.InvalidParameter">
            <summary>
            Invalid function parameter or struct value
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.UnexpectedError">
            <summary>
            Internal unexpected C++ exception
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.CantOpenFile">
            <summary>
            Database file can't be opened; may not exist
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.IOError">
            <summary>
            File I/O error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.MemoryError">
            <summary>
            Memory allocation failed (out of memory?)
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.NotWriteable">
            <summary>
            File is not writeable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.CorruptData">
            <summary>
            Data is corrupted
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.Busy">
            <summary>
            Database is busy / locked
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.NotInTransaction">
            <summary>
            Function cannot be called while in a transaction
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.TransactionNotClosed">
            <summary>
            Database can't be closed while a transaction is open
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.Unsupported">
            <summary>
            Operation not supported on this database
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.UnreadableDatabase">
            <summary>
            File is not a database or encryption key is wrong
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WrongFormat">
            <summary>
            Database exists but not in the format/storage requested
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.Crypto">
            <summary>
            Encryption / Decryption error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.InvalidQuery">
            <summary>
            Invalid query
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.MissingIndex">
            <summary>
            No such index, or query requires a nonexistent index
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.InvalidQueryParam">
            <summary>
            Unknown query param name, or param number out of range
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.RemoteError">
            <summary>
            Unknown error from remote server
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.DatabaseTooOld">
            <summary>
            Database file format is older than what I can open
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.DatabaseTooNew">
            <summary>
            Database file format is newer than what I can open
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.BadDocID">
            <summary>
            Invalid document ID
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.CantUpgradeDatabase">
            <summary>
            Database can't be upgraded (might be unsupported dev version)
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.NetworkBase">
            <summary>
            Not an actual error, but serves as the lower bound for network related
            errors
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.DNSFailure">
            <summary>
            DNS Lookup failed
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.UnknownHost">
            <summary>
            DNS server doesn't know the hostname
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.Timeout">
            <summary>
            Socket timeout during an operation
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.InvalidUrl">
            <summary>
            The provided URL is not valid
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.TooManyRedirects">
            <summary>
            Too many HTTP redirects for the HTTP client to handle
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.TLSHandshakeFailed">
            <summary>
            Failure during TLS handshake process
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.TLSCertExpired">
            <summary>
            The provided TLS certificate has expired
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.TLSCertUntrusted">
            <summary>
            Cert isn't trusted for other reason
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.TLSClientCertRequired">
            <summary>
            A required client certificate was not provided
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.TLSClientCertRejected">
            <summary>
            Client certificate was rejected by the server
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.TLSCertUnknownRoot">
            <summary>
            Self-signed cert, or unknow anchor cert
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.InvalidRedirect">
            <summary>
            The client was redirected to an invalid location by the server
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.HTTPBase">
            <summary>
            Not an actual error, but serves as the lower bound for HTTP related
            errors
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.HTTPAuthRequired">
            <summary>
            Missing or incorrect user authentication
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.HTTPForbidden">
            <summary>
            User doesn't have permission to access resource
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.HTTPNotFound">
            <summary>
            Resource not found
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.HTTPProxyAuthRequired">
            <summary>
            HTTP proxy requires authentication
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.HTTPConflict">
            <summary>
            Update conflict
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.HTTPEntityTooLarge">
            <summary>
            Data is too large to upload
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.HTTPInternalServerError">
            <summary>
            Something's wrong with the server
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.HTTPNotImplemented">
            <summary>
            Unimplemented server functionality
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.HTTPServiceUnavailable">
            <summary>
            Service is down temporarily
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketBase">
            <summary>
            Not an actual error, but serves as the lower bound for WebSocket
            related errors
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketGoingAway">
            <summary>
            Peer has to close, e.g. because host app is quitting
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketProtocolError">
            <summary>
            Protocol violation: invalid framing data
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketDataError">
            <summary>
            Message payload cannot be handled
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketAbnormalClose">
            <summary>
            TCP socket closed unexpectedly
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketBadMessageFormat">
            <summary>
            Unparseable WebSocket message
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketPolicyError">
            <summary>
            Message violated unspecified policy
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketMessageTooBig">
            <summary>
            Message is too large for peer to handle
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketMissingExtension">
            <summary>
            Peer doesn't provide a necessary extension
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketCantFulfill">
            <summary>
            Can't fulfill request due to "unexpected condition"
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketUserTransient">
            <summary>
            Exceptions during P2P replication that are transient will be assigned this error code
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteError.WebSocketUserPermanent">
            <summary>
            Exceptions during P2P replication that are permanent will be assigned this error code
            </summary>
        </member>
        <member name="T:Couchbase.Lite.CouchbaseLiteErrorType">
            <summary>
            These are the domains into which a <see cref="T:Couchbase.Lite.CouchbaseException"/>
            can fall.  Each domain has one or more corresponding exception subclasses.
            You can trap a <see cref="T:Couchbase.Lite.CouchbaseException"/> and check its <see cref="P:Couchbase.Lite.CouchbaseException.Domain"/>
            to see which kind of subclass you should cast to, if desirable.  Subclasses have a fixed domain.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteErrorType.CouchbaseLite">
            <summary>
            This error was generated by LiteCore and involves data verification,
            disk and network I/O, and HTTP / WebSocket statuses
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteErrorType.POSIX">
            <summary>
            A POSIX error code was received during operation.  For Windows this is
            best effort as Win32 API does not set POSIX error codes.
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteErrorType.SQLite">
            <summary>
            An error occurred during a SQLite operation and is being bubbled up
            </summary>
        </member>
        <member name="F:Couchbase.Lite.CouchbaseLiteErrorType.Fleece">
            <summary>
            An error occurred during serialization or deserialization of data
            </summary>
        </member>
        <member name="T:Couchbase.Lite.CouchbaseException">
            <summary>
            An exception representing one of the types of exceptions that can occur
            during Couchbase use
            </summary>
        </member>
        <member name="P:Couchbase.Lite.CouchbaseException.Domain">
            <summary>
            Gets the domain of the error that happened (which indicates which subclass
            this exception will be)
            </summary>
        </member>
        <member name="P:Couchbase.Lite.CouchbaseException.Error">
            <summary>
            Gets the raw error code as an integer
            </summary>
        </member>
        <member name="T:Couchbase.Lite.CouchbaseLiteException">
            <summary>
            An exception that is thrown when a <see cref="T:Couchbase.Lite.CouchbaseLiteError"/> is detected.
            This class will always have the <see cref="F:Couchbase.Lite.CouchbaseLiteErrorType.CouchbaseLite"/>
            domain set.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.CouchbaseLiteException.Error">
            <summary>
            Gets the error code as a <see cref="T:Couchbase.Lite.CouchbaseLiteError"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.CouchbaseFleeceException">
            <summary>
            An exception that is thrown when a Fleece error is detected.  Fleece is the
            library used to serialize and deserialize data.  Any error of this type is not
            reactable by the user and so the error codes are not enumerated.  This type of
            exception should be reported.  This class has a domain type of <see cref="F:Couchbase.Lite.CouchbaseLiteErrorType.Fleece"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.CouchbaseSQLiteException">
            <summary>
            An exception used to indicate a SQLite operation error.  The possible errors are enumerated as
            <see cref="T:LiteCore.Interop.SQLiteStatus"/> for convenience.  This class has a domain type of <see cref="F:Couchbase.Lite.CouchbaseLiteErrorType.SQLite"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.CouchbaseSQLiteException.BaseError">
            <summary>
            Gets the error as a <see cref="T:LiteCore.Interop.SQLiteStatus"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.CouchbaseWebsocketException">
            <summary>
            An exception that is thrown when there is an abnormal websocket condition detected.
            This exception has a domain of <see cref="F:Couchbase.Lite.CouchbaseLiteErrorType.CouchbaseLite"/>.
            </summary>
        </member>
        <member name="P:Couchbase.Lite.CouchbaseWebsocketException.Error">
            <summary>
            Gets the error as a <see cref="T:Couchbase.Lite.CouchbaseLiteError"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.CouchbaseNetworkException">
            <summary>
            An exception that is thrown when there is an abnormal network condition detected.
            This exception has a domain of <see cref="F:Couchbase.Lite.CouchbaseLiteErrorType.CouchbaseLite"/>
            </summary>
        </member>
        <member name="P:Couchbase.Lite.CouchbaseNetworkException.Error">
            <summary>
            Gets the error as a <see cref="T:Couchbase.Lite.CouchbaseLiteError"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.CouchbasePosixException">
            <summary>
            An exception that is thrown when a POSIX error code is received during operation.
            This exception has a domain of <see cref="F:Couchbase.Lite.CouchbaseLiteErrorType.POSIX"/>.  The <see cref="P:Couchbase.Lite.CouchbaseException.Error"/>
            values are dependent on the OS being run on.  They are defined in <see cref="T:Couchbase.Lite.PosixWindows"/>,
            <see cref="T:Couchbase.Lite.PosixMac"/> and <see cref="T:Couchbase.Lite.PosixLinux"/>
            </summary>
        </member>
        <member name="T:Couchbase.Lite.PosixBase">
            <summary>
            The base codes that are guaranteed to be the same on any POSIX system
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EPERM">
            <summary>
            Operation not permitted 
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ENOENT">
            <summary>
            No such file or directory
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ESRCH">
            <summary>
            No such process
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EINTR">
            <summary>
            Interrupted system call
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EIO">
            <summary>
            Input/output error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ENXIO">
            <summary>
            Device not configured
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.E2BIG">
            <summary>
            Argument list too long
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ENOEXEC">
            <summary>
            Exec format error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EBADF">
            <summary>
            Bad file descriptor
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ECHILD">
            <summary>
            No child processes
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ENOMEM">
            <summary>
            Cannot allocate memory
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EACCES">
            <summary>
            Permission denied
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EFAULT">
            <summary>
            Bad address
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EBUSY">
            <summary>
            Device / Resource busy
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EEXIST">
            <summary>
            File exists
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EXDEV">
            <summary>
            Cross-device link
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ENODEV">
            <summary>
            Operation not supported by device
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ENOTDIR">
            <summary>
            Not a directory
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EISDIR">
            <summary>
            Is a directory
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EINVAL">
            <summary>
            Invalid argument
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ENFILE">
            <summary>
            Too many open files in system
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EMFILE">
            <summary>
            Too many open files
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ENOTTY">
            <summary>
            Inappropriate ioctl for device
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EFBIG">
            <summary>
            File too large
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ENOSPC">
            <summary>
            No space left on device
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ESPIPE">
            <summary>
            Illegal seek
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EROFS">
            <summary>
            Read-only file system
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EMLINK">
            <summary>
            Too many links
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EPIPE">
            <summary>
            Broken pipe
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.EDOM">
            <summary>
            Numerical argument out of domain
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixBase.ERANGE">
            <summary>
            Result too large
            </summary>
        </member>
        <member name="M:Couchbase.Lite.PosixBase.GetCode(System.String)">
            <summary>
            Gets the correct value for a given code (based on the name of the error e.g. ECONNREFUSED)
            for the currently executing OS
            </summary>
            <param name="name">The name of the code to get the value for (e.g. ECONNREFUSED)</param>
            <returns>The correct code for the given error, or 0 if the name does not exist</returns>
        </member>
        <member name="M:Couchbase.Lite.PosixBase.IsError(System.String,System.Int32)">
            <summary>
            Checks whether or not the given code is the same as the code for the POSIX
            error name in a cross platform way.
            </summary>
            <param name="name">The name of the code to get the value for (e.g. ECONNREFUSED)</param>
            <param name="code">The code to check</param>
            <returns><c>true</c> if the code matches, otherwise <c>false</c></returns>
        </member>
        <member name="T:Couchbase.Lite.PosixWindows">
            <summary>
            POSIX codes that are specific to Windows
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EAGAIN">
            <summary>
            Resource temporarily unavailable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EDEADLK">
            <summary>
            Resource deadlock avoided
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENAMETOOLONG">
            <summary>
            File name too long
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOLCK">
            <summary>
            No locks available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOSYS">
            <summary>
            Function not implemented
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOTEMPTY">
            <summary>
            Directory not empty
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EILSEQ">
            <summary>
            Illegal byte sequence
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EADDRINUSE">
            <summary>
            Address already in use
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EADDRNOTAVAIL">
            <summary>
            Can't assign requested address
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EAFNOSUPPORT">
            <summary>
            Address family not supported by protocol family
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EALREADY">
            <summary>
            Operation already in progress
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EBADMSG">
            <summary>
            Bad message
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ECANCELED">
            <summary>
            Operation canceled
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ECONNABORTED">
            <summary>
            Software caused connection abort
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ECONNREFUSED">
            <summary>
            Connection refused
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ECONNRESET">
            <summary>
            Connection reset by peer
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EDESTADDRREQ">
            <summary>
            Destination address required
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EHOSTUNREACH">
            <summary>
            No route to host
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EIDRM">
            <summary>
            Identifier removed
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EINPROGRESS">
            <summary>
            Operation now in progress
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EISCONN">
            <summary>
            Socket is already connected
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ELOOP">
            <summary>
            Too many levels of symbolic links
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EMSGSIZE">
            <summary>
            Message too long
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENETDOWN">
            <summary>
            Network is down
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENETRESET">
            <summary>
            Network dropped connection on reset
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENETUNREACH">
            <summary>
            Network is unreachable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOBUFS">
            <summary>
            No buffer space available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENODATA">
            <summary>
            No message available on STREAM
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOLINK">
            <summary>
            Link has been severed
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOMSG">
            <summary>
            No message of desired type
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOPROTOOPT">
            <summary>
            Protocol not available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOSR">
            <summary>
            No STREAM resources
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOSTR">
            <summary>
            Not a STREAM
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOTCONN">
            <summary>
            Socket is not connected
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOTRECOVERABLE">
            <summary>
            State not recoverable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOTSOCK">
            <summary>
            Socket operation on non-socket
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ENOTSUP">
            <summary>
            Operation not supported
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EOPNOTSUPP">
            <summary>
            Operation not supported on socket
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EOTHER">
            <summary>
            Undefined error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EOVERFLOW">
            <summary>
            Value too large to be stored in data type
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EOWNERDEAD">
            <summary>
            Previous owner died
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EPROTO">
            <summary>
            Protocol error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EPROTONOSUPPORT">
            <summary>
            Protocol not supported
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EPROTOTYPE">
            <summary>
            Protocol wrong type for socket
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ETIME">
            <summary>
            STREAM ioctl timeout
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ETIMEDOUT">
            <summary>
            Operation timed out
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.ETXTBSY">
            <summary>
            Text file busy
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixWindows.EWOULDBLOCK">
            <summary>
            Operation would block
            </summary>
        </member>
        <member name="T:Couchbase.Lite.PosixMac">
            <summary>
            A class containing POSIX codes that are unique to macOS
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EDEADLK">
            <summary>
            Resource deadlock avoided
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOTBLK">
            <summary>
            Block device required
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ETXTBSY">
            <summary>
            Text file busy
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EAGAIN">
            <summary>
            Resource temporarily unavailable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EWOULDBLOCK">
            <summary>
            Operation would block
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EINPROGRESS">
            <summary>
            Operation now in progress
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EALREADY">
            <summary>
            Operation already in progress
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOTSOCK">
            <summary>
            Socket operation on non-socket
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EDESTADDRREQ">
            <summary>
            Destination address required
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EMSGSIZE">
            <summary>
            Message too long
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EPROTOTYPE">
            <summary>
            Protocol wrong type for socket
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOPROTOOPT">
            <summary>
            Protocol not available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EPROTONOSUPPORT">
            <summary>
            Protocol not supported
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ESOCKTNOSUPPORT">
            <summary>
            Socket type not supported
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOTSUP">
            <summary>
            Operation not supported
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EOPNOTSUPP">
            <summary>
            Operation not supported on socket
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EPFNOSUPPORT">
            <summary>
            Protocol family not supported
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EAFNOSUPPORT">
            <summary>
            Address family not supported by protocol family
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EADDRINUSE">
            <summary>
            Address already in use
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EADDRNOTAVAIL">
            <summary>
            Can't assign requested address
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENETDOWN">
            <summary>
            Network is down
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENETUNREACH">
            <summary>
            Network is unreachable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENETRESET">
            <summary>
            Network dropped connection on reset
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ECONNABORTED">
            <summary>
            Software caused connection abort
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ECONNRESET">
            <summary>
            Connection reset by peer
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOBUFS">
            <summary>
            No buffer space available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EISCONN">
            <summary>
            Socket is already connected
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOTCONN">
            <summary>
            Socket is not connected
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ESHUTDOWN">
            <summary>
            Can't send after socket shutdown
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ETOOMANYREFS">
            <summary>
            Too many references: can't splice
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ETIMEDOUT">
            <summary>
            Operation timed out
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ECONNREFUSED">
            <summary>
            Connection refused
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ELOOP">
            <summary>
            Too many levels of symbolic links
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENAMETOOLONG">
            <summary>
            File name too long
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EHOSTDOWN">
            <summary>
            Host is down
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EHOSTUNREACH">
            <summary>
            No route to host
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOTEMPTY">
            <summary>
            Directory not empty
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EPROCLIM">
            <summary>
            Too many processes
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EUSERS">
            <summary>
            Too many users
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EDQUOT">
            <summary>
            Disc quota exceeded
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ESTALE">
            <summary>
            Stale NFS file handle
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EREMOTE">
            <summary>
            Too many levels of remote in path
            </summary>   
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EBADRPC">
            <summary>
            RPC struct is bad
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ERPCMISMATCH">
            <summary>
            RPC version wrong
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EPROGUNAVAIL">
            <summary>
            RPC prog. not avail
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EPROGMISMATCH">
            <summary>
            Program version wrong
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EPROCUNAVAIL">
            <summary>
            Bad procedure for program
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOLCK">
            <summary>
            No locks available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOSYS">
            <summary>
            Function not implemented
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EFTYPE">
            <summary>
            Inappropriate file type or format
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EAUTH">
            <summary>
            Authentication error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENEEDAUTH">
            <summary>
            Need authenticator
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EPWROFF">
            <summary>
            Device power is off
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EDEVERR">
            <summary>
            Device error, e.g. paper out
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EOVERFLOW">
            <summary>
            Value too large to be stored in data type
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EBADEXEC">
            <summary>
            Bad executable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EBADARCH">
            <summary>
            Bad CPU type in executable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ESHLIBVERS">
            <summary>
            Shared library version mismatch
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EBADMACHO">
            <summary>
            Malformed Macho file
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ECANCELED">
            <summary>
            Operation canceled
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EIDRM">
            <summary>
            Identifier removed
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOMSG">
            <summary>
            No message of desired type
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EILSEQ">
            <summary>
            Illegal byte sequence
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOATTR">
            <summary>
            Attribute not found
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EBADMSG">
            <summary>
            Bad message
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EMULTIHOP">
            <summary>
            Multihop attempted
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENODATA">
            <summary>
            No message available on STREAM
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOLINK">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOSR">
            <summary>
            No STREAM resources
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOSTR">
            <summary>
            Not a STREAM
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EPROTO">
            <summary>
            Protocol error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ETIME">
            <summary>
            STREAM ioctl timeout
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOPOLICY">
            <summary>
            No such policy registered
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.ENOTRECOVERABLE">
            <summary>
            State not recoverable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EOWNERDEAD">
            <summary>
            Previous owner died
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixMac.EQFULL">
            <summary>
            Interface output queue is full
            </summary>
        </member>
        <member name="T:Couchbase.Lite.PosixLinux">
            <summary>
            A class containing POSIX codes that are unique to the Linux kernel
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EAGAIN">
            <summary>
            Resource temporarily unavailable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EWOULDBLOCK">
            <summary>
            Operation would block
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOTBLK">
            <summary>
            Block device required
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ETXTBSY">
            <summary>
            Text file busy
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EDEADLK">
            <summary>
            Resource deadlock would occur
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENAMETOOLONG">
            <summary>
            File name too long
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOLCK">
            <summary>
            No record locks available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOSYS">
            <summary>
            Function not implemented
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOTEMPTY">
            <summary>
            Directory not empty
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ELOOP">
            <summary>
            Too many symbolic links encountered
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOMSG">
            <summary>
            No message of desired type
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EIDRM">
            <summary>
            Identifier removed
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ECHRNG">
            <summary>
            Channel number out of range
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EL2NSYNC">
            <summary>
            Level 2 not synchronized
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EL3HLT">
            <summary>
            Level 3 halted
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EL3RST">
            <summary>
            Level 3 reset
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ELNRNG">
            <summary>
            Link number out of range
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EUNATCH">
            <summary>
            Protocol driver not attached
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOCSI">
            <summary>
            No CSI structure available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EL2HLT">
            <summary>
            Level 2 halted
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EBADE">
            <summary>
            Invalid exchange
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EBADR">
            <summary>
            Invalid request descriptor
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EXFULL">
            <summary>
            Exchange full
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOANO">
            <summary>
            No anode
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EBADRQC">
            <summary>
            Invalid request code
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EBADSLT">
            <summary>
            Invalid slot
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EBFONT">
            <summary>
            Bad font file format
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOSTR">
            <summary>
            Device not a stream
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENODATA">
            <summary>
            No data available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ETIME">
            <summary>
            Timer expired
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOSR">
            <summary>
            Out of streams resources
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENONET">
            <summary>
            Machine is not on the network
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOPKG">
            <summary>
            Package not installed
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EREMOTE">
            <summary>
            Object is remote
            </summary>   
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOLINK">
            <summary>
            Link has been severed
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EADV">
            <summary>
            Advertise error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ESRMNT">
            <summary>
            Srmount error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ECOMM">
            <summary>
            Communication error on send
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EPROTO">
            <summary>
            Protocol error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EMULTIHOP">
            <summary>
            Multihop attempted
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EDOTDOT">
            <summary>
            RFS specific error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EBADMSG">
            <summary>
            Not a data message
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EOVERFLOW">
            <summary>
            Value too large for defined data type
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOTUNIQ">
            <summary>
            Name not unique on network
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EBADFD">
            <summary>
            File descriptor in bad state
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EREMCHG">
            <summary>
            Remote address changed
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ELIBACC">
            <summary>
            Can not access a needed shared library
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ELIBBAD">
            <summary>
            Accessing a corrupted shared library
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ELIBSCN">
            <summary>
            .lib section in a.out corrupted
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ELIBMAX">
            <summary>
            Attempting to link in too many shared libraries
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ELIBEXEC">
            <summary>
            Cannot exec a shared library directly
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EILSEQ">
            <summary>
            Illegal byte sequence
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ERESTART">
            <summary>
            Interrupted system call should be restarted
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ESTRPIPE">
            <summary>
            Streams pipe error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EUSERS">
            <summary>
            Too many users
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOTSOCK">
            <summary>
            Socket operation on non-socket
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EDESTADDRREQ">
            <summary>
            Destination address required
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EMSGSIZE">
            <summary>
            Message too long
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EPROTOTYPE">
            <summary>
            Protocol wrong type for socket
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOPROTOOPT">
            <summary>
            Protocol not available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EPROTONOSUPPORT">
            <summary>
            Protocol not supported
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ESOCKTNOSUPPORT">
            <summary>
            Socket type not supported
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EOPNOTSUPP">
            <summary>
            Operation not supported on transport endpoint
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EPFNOSUPPORT">
            <summary>
            Protocol family not supported
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EAFNOSUPPORT">
            <summary>
            Address family not supported by protocol
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EADDRINUSE">
            <summary>
            Address already in use
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EADDRNOTAVAIL">
            <summary>
            Cannot assign requested address
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENETDOWN">
            <summary>
            Network is down
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENETUNREACH">
            <summary>
            Network is unreachable
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENETRESET">
            <summary>
            Network dropped connection because of reset
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ECONNABORTED">
            <summary>
            Software caused connection abort
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ECONNRESET">
            <summary>
            Connection reset by peer
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOBUFS">
            <summary>
            No buffer space available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EISCONN">
            <summary>
            Transport endpoint is already connected
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOTCONN">
            <summary>
            Transport endpoint is not connected
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ESHUTDOWN">
            <summary>
            Cannot send after transport endpoint shutdown
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ETOOMANYREFS">
            <summary>
            Too many references: cannot splice
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ETIMEDOUT">
            <summary>
            Connection timed out
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ECONNREFUSED">
            <summary>
            Connection refused
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EHOSTDOWN">
            <summary>
            Host is down
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EHOSTUNREACH">
            <summary>
            No route to host
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EALREADY">
            <summary>
            Operation already in progress
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EINPROGRESS">
            <summary>
            Operation now in progress
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ESTALE">
            <summary>
            Stale NFS file handle
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EUNCLEAN">
            <summary>
            Structure needs cleaning
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOTNAM">
            <summary>
            Not a XENIX named type file
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENAVAIL">
            <summary>
            No XENIX semaphores available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EISNAM">
            <summary>
            Is a named type file
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EREMOTEIO">
            <summary>
            Remote I/O error
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EDQUOT">
            <summary>
            Quota exceeded
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOMEDIUM">
            <summary>
            No medium found
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EMEDIUMTYPE">
            <summary>
            Wrong medium type
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ECANCELED">
            <summary>
            Operation Canceled
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOKEY">
            <summary>
            Required key not available
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EKEYEXPIRED">
            <summary>
            Key has expired
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EKEYREVOKED">
            <summary>
            Key has been revoked
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EKEYREJECTED">
            <summary>
            Key was rejected by service
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.EOWNERDEAD">
            <summary>
            Owner died
            </summary>
        </member>
        <member name="F:Couchbase.Lite.PosixLinux.ENOTRECOVERABLE">
            <summary>
            State not recoverable
            </summary>
        </member>
        <member name="T:LiteCore.Interop.C4TryLogicDelegate1">
            <summary>
            A delegate for calling native functions that return
            a bool and have an out error parameter
            </summary>
        </member>
        <member name="T:LiteCore.Interop.C4TryLogicDelegate2">
            <summary>
            A delegate for calling native functions that return
            a pointer and have an out error parameter
            </summary>
        </member>
        <member name="T:LiteCore.Interop.C4TryLogicDelegate3">
            <summary>
            A delegate for calling native functions that return
            an int and have an out error parameter
            </summary>
        </member>
        <member name="T:LiteCore.Interop.NativeHandler">
            <summary>
            A rudimentary retry handler with options for allowing specific errors
            and custom exception handling
            </summary>
        </member>
        <member name="P:LiteCore.Interop.NativeHandler.Exception">
            <summary>
            Gets the exception thrown during the operation, if any
            </summary>
        </member>
        <member name="M:LiteCore.Interop.NativeHandler.Create">
            <summary>
            Creates a new object for chaining in a fluent fashion
            </summary>
            <returns>A constructed object</returns>
        </member>
        <member name="M:LiteCore.Interop.NativeHandler.AllowError(System.Int32,LiteCore.Interop.C4ErrorDomain)">
            <summary>
            Allows the operation to succeed even if an error with the
            given code and domain occurs
            </summary>
            <returns>The current object for further fluent operations</returns>
            <param name="code">The code of the error to allow.</param>
            <param name="domain">The domain of the error to allow.</param>
        </member>
        <member name="M:LiteCore.Interop.NativeHandler.AllowError(LiteCore.Interop.C4Error)">
            <summary>
            Allows the operation to succeed even if the given error
            occurs
            </summary>
            <returns>The current object for further fluent operations</returns>
            <param name="error">The error to allow.</param>
        </member>
        <member name="M:LiteCore.Interop.NativeHandler.AllowErrors(LiteCore.Interop.C4Error[])">
            <summary>
            Allows the operation to succeed even if any of the
            given errors occur
            </summary>
            <returns>The current object for further fluent operations</returns>
            <param name="errors">The errors to allow.</param>
        </member>
        <member name="M:LiteCore.Interop.NativeHandler.AllowErrors(System.Collections.Generic.IEnumerable{LiteCore.Interop.C4Error})">
            <summary>
            Allows the operation to succeed even if any of the
            given errors occur
            </summary>
            <returns>The current object for further fluent operations</returns>
            <param name="errors">The errors to allow.</param>
        </member>
        <member name="M:LiteCore.Interop.NativeHandler.HandleExceptions(System.Action{Couchbase.Lite.CouchbaseException})">
            <summary>
            Sets the handler for any exception generated during the operation
            that is not allowed by any of the AllowError API calls.  This will
            stop the retry handler from throwing.
            </summary>
            <returns>The current object for further fluent operations</returns>
            <param name="exceptionHandler">The logic for handling exceptions</param>
        </member>
        <member name="T:LiteCore.Interop.SQLiteStatus">
            <summary>
            SQLite status codes
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Ok">
            <summary>
            Successful result
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Error">
            <summary>
            SQL error or missing database
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Internal">
            <summary>
            Internal logic error in SQLite
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Perm">
            <summary>
            Access permission denied
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Abort">
            <summary>
            Callback routine requested an abort
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Busy">
            <summary>
            The database file is locked
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Locked">
            <summary>
            A table in the database is locked
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.NoMem">
            <summary>
            A malloc() failed
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.ReadOnly">
            <summary>
            Attempt to write a readonly database
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Interrupt">
            <summary>
            Operation terminated by sqlite3_interrupt()
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.IoErr">
            <summary>
            Some kind of disk I/O error occurred 
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Corrupt">
            <summary>
            The database disk image is malformed
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.NotFound">
            <summary>
            Unknown opcode in sqlite3_file_control()
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Full">
            <summary>
            Insertion failed because database is full
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.CantOpen">
            <summary>
            Unable to open the database file
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Protocol">
            <summary>
            Database lock protocol error
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Empty">
            <summary>
            Database is empty
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Schema">
            <summary>
            The database schema changed
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.TooBig">
            <summary>
            String or BLOB exceeds size limit
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Constraint">
            <summary>
            Abort due to constraint violation
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Mismatch">
            <summary>
            Data type mismatch
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Misuse">
            <summary>
            Library used incorrectly
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.NoLfs">
            <summary>
            Uses OS features not supported on host
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Auth">
            <summary>
            Authorization denied
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Format">
            <summary>
            Auxiliary database format error
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Range">
            <summary>
            2nd parameter to sqlite3_bind out of range
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.NotADb">
            <summary>
            File opened that is not a database file
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Notice">
            <summary>
            Notifications from sqlite3_log()
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Warning">
            <summary>
            Warnings from sqlite3_log()
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Row">
            <summary>
            sqlite3_step() has another row ready
            </summary>
        </member>
        <member name="F:LiteCore.Interop.SQLiteStatus.Done">
            <summary>
            sqlite3_step() has finished executing
            </summary>
        </member>
        <member name="T:LiteCore.Util.C4String">
            <summary>
            Helper class for marshalling string &lt;&gt; C4Slice without creating an extra copy
            of the bytes.  Not for storage or long-term use
            </summary>
        </member>
        <member name="M:LiteCore.Util.C4String.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="s">The string to store in this instance</param>
        </member>
        <member name="M:LiteCore.Util.C4String.AsFLSlice">
            <summary>
            Returns this object as a FLSlice.  This object will only be valid
            while the original C4String object is valid.
            </summary>
            <returns>Ths C4String instance as a FLSlice</returns>
        </member>
        <member name="T:LiteCore.Util.PerfTimer">
            <summary>
            Simple utility for timing arbitrary logic and listing hotspots
            </summary>
        </member>
        <member name="M:LiteCore.Util.PerfTimer.StartRun">
            <summary>
            Starts an overall run (memory measurement)
            </summary>
        </member>
        <member name="M:LiteCore.Util.PerfTimer.StartEvent(System.String)">
            <summary>
            Starts a new performance event
            </summary>
            <param name="name">The name for the event</param>
        </member>
        <member name="M:LiteCore.Util.PerfTimer.StopEvent(System.String)">
            <summary>
            Stops the performance event with the given name and records its time
            </summary>
            <param name="name">The name of the event to stop</param>
        </member>
        <member name="M:LiteCore.Util.PerfTimer.WriteStats(System.Action{System.String})">
            <summary>
            Writes the statistics about all of the recorded performance events
            using the given handler
            </summary>
            <param name="handler">The handler used to write the performance events</param>
        </member>
        <member name="T:JetBrains.Annotations.CanBeNullAttribute">
            <summary>
            Indicates that the value of the marked element could be <c>null</c> sometimes,
            so the check for <c>null</c> is necessary before its usage.
            </summary>
            <example><code>
            [CanBeNull] object Test() => null;
            
            void UseTest() {
              var p = Test();
              var s = p.ToString(); // Warning: Possible 'System.NullReferenceException'
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ItemNotNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can never be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ItemCanBeNullAttribute">
            <summary>
            Can be appplied to symbols of types derived from IEnumerable as well as to symbols of Task
            and Lazy classes to indicate that the value of a collection item, of the Task.Result property
            or of the Lazy.Value property can be null.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.StringFormatMethodAttribute">
            <summary>
            Indicates that the marked method builds string by format pattern and (optional) arguments.
            Parameter, which contains format string, should be given in constructor. The format string
            should be in <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>-like form.
            </summary>
            <example><code>
            [StringFormatMethod("message")]
            void ShowError(string message, params object[] args) { /* do something */ }
            
            void Foo() {
              ShowError("Failed: {0}"); // Warning: Non-existing argument in format string
            }
            </code></example>
        </member>
        <member name="M:JetBrains.Annotations.StringFormatMethodAttribute.#ctor(System.String)">
            <param name="formatParameterName">
            Specifies which parameter of an annotated method should be treated as format-string
            </param>
        </member>
        <member name="T:JetBrains.Annotations.ValueProviderAttribute">
            <summary>
            For a parameter that is expected to be one of the limited set of values.
            Specify fields of which type should be used as values for this parameter.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InvokerParameterNameAttribute">
            <summary>
            Indicates that the function argument should be string literal and match one
            of the parameters of the caller function. For example, ReSharper annotates
            the parameter of <see cref="T:System.ArgumentNullException"/>.
            </summary>
            <example><code>
            void Foo(string param) {
              if (param == null)
                throw new ArgumentNullException("par"); // Warning: Cannot resolve symbol
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.NotifyPropertyChangedInvocatorAttribute">
             <summary>
             Indicates that the method is contained in a type that implements
             <c>System.ComponentModel.INotifyPropertyChanged</c> interface and this method
             is used to notify that some property value changed.
             </summary>
             <remarks>
             The method should be non-static and conform to one of the supported signatures:
             <list>
             <item><c>NotifyChanged(string)</c></item>
             <item><c>NotifyChanged(params string[])</c></item>
             <item><c>NotifyChanged{T}(Expression{Func{T}})</c></item>
             <item><c>NotifyChanged{T,U}(Expression{Func{T,U}})</c></item>
             <item><c>SetProperty{T}(ref T, T, string)</c></item>
             </list>
             </remarks>
             <example><code>
             public class Foo : INotifyPropertyChanged {
               public event PropertyChangedEventHandler PropertyChanged;
             
               [NotifyPropertyChangedInvocator]
               protected virtual void NotifyChanged(string propertyName) { ... }
            
               string _name;
             
               public string Name {
                 get { return _name; }
                 set { _name = value; NotifyChanged("LastName"); /* Warning */ }
               }
             }
             </code>
             Examples of generated notifications:
             <list>
             <item><c>NotifyChanged("Property")</c></item>
             <item><c>NotifyChanged(() =&gt; Property)</c></item>
             <item><c>NotifyChanged((VM x) =&gt; x.Property)</c></item>
             <item><c>SetProperty(ref myField, value, "Property")</c></item>
             </list>
             </example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
        <member name="T:JetBrains.Annotations.LocalizationRequiredAttribute">
            <summary>
            Indicates that marked element should be localized or not.
            </summary>
            <example><code>
            [LocalizationRequiredAttribute(true)]
            class Foo {
              string str = "my string"; // Warning: Localizable string
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.CannotApplyEqualityOperatorAttribute">
            <summary>
            Indicates that the value of the marked type (or its derivatives)
            cannot be compared using '==' or '!=' operators and <c>Equals()</c>
            should be used instead. However, using '==' or '!=' for comparison
            with <c>null</c> is always permitted.
            </summary>
            <example><code>
            [CannotApplyEqualityOperator]
            class NoEquality { }
            
            class UsesNoEquality {
              void Test() {
                var ca1 = new NoEquality();
                var ca2 = new NoEquality();
                if (ca1 != null) { // OK
                  bool condition = ca1 == ca2; // Warning
                }
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.BaseTypeRequiredAttribute">
            <summary>
            When applied to a target attribute, specifies a requirement for any type marked
            with the target attribute to implement or inherit specific type or types.
            </summary>
            <example><code>
            [BaseTypeRequired(typeof(IComponent)] // Specify requirement
            class ComponentAttribute : Attribute { }
            
            [Component] // ComponentAttribute requires implementing IComponent interface
            class MyComponent : IComponent { }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.UsedImplicitlyAttribute">
            <summary>
            Indicates that the marked symbol is used implicitly (e.g. via reflection, in external library),
            so this symbol will not be marked as unused (as well as by other usage inspections).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.MeansImplicitUseAttribute">
            <summary>
            Should be used on attributes and causes ReSharper to not mark symbols marked with such attributes
            as unused (as well as by other usage inspections)
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Access">
            <summary>Only entity marked with attribute considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.Assign">
            <summary>Indicates implicit assignment to a member.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedWithFixedConstructorSignature">
            <summary>
            Indicates implicit instantiation of a type with fixed constructor signature.
            That means any unused constructor parameters won't be reported as such.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseKindFlags.InstantiatedNoFixedConstructorSignature">
            <summary>Indicates implicit instantiation of a type.</summary>
        </member>
        <member name="T:JetBrains.Annotations.ImplicitUseTargetFlags">
            <summary>
            Specify what is considered used implicitly when marked
            with <see cref="T:JetBrains.Annotations.MeansImplicitUseAttribute"/> or <see cref="T:JetBrains.Annotations.UsedImplicitlyAttribute"/>.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.Members">
            <summary>Members of entity marked with attribute are considered used.</summary>
        </member>
        <member name="F:JetBrains.Annotations.ImplicitUseTargetFlags.WithMembers">
            <summary>Entity marked with attribute and all its members considered used.</summary>
        </member>
        <member name="T:JetBrains.Annotations.PublicAPIAttribute">
            <summary>
            This attribute is intended to mark publicly available API
            which should not be removed and so is treated as used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.InstantHandleAttribute">
            <summary>
            Tells code analysis engine if the parameter is completely handled when the invoked method is on stack.
            If the parameter is a delegate, indicates that delegate is executed while the method is executed.
            If the parameter is an enumerable, indicates that it is enumerated while the method is executed.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.PureAttribute">
            <summary>
            Indicates that a method does not make any observable state changes.
            The same as <c>System.Diagnostics.Contracts.PureAttribute</c>.
            </summary>
            <example><code>
            [Pure] int Multiply(int x, int y) => x * y;
            
            void M() {
              Multiply(123, 42); // Waring: Return value of pure method is not used
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.MustUseReturnValueAttribute">
            <summary>
            Indicates that the return value of method invocation must be used.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.ProvidesContextAttribute">
            <summary>
            Indicates the type member or parameter of some type, that should be used instead of all other ways
            to get the value that type. This annotation is useful when you have some "context" value evaluated
            and stored somewhere, meaning that all other ways to get this value must be consolidated with existing one.
            </summary>
            <example><code>
            class Foo {
              [ProvidesContext] IBarService _barService = ...;
            
              void ProcessNode(INode node) {
                DoSomething(node, node.GetGlobalServices().Bar);
                //              ^ Warning: use value of '_barService' field
              }
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.PathReferenceAttribute">
            <summary>
            Indicates that a parameter is a path to a file or a folder within a web project.
            Path can be relative or absolute, starting from web root (~).
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.SourceTemplateAttribute">
            <summary>
            An extension method marked with this attribute is processed by ReSharper code completion
            as a 'Source Template'. When extension method is completed over some expression, it's source code
            is automatically expanded like a template at call site.
            </summary>
            <remarks>
            Template method body can contain valid source code and/or special comments starting with '$'.
            Text inside these comments is added as source code when the template is applied. Template parameters
            can be used either as additional method parameters or as identifiers wrapped in two '$' signs.
            Use the <see cref="T:JetBrains.Annotations.MacroAttribute"/> attribute to specify macros for parameters.
            </remarks>
            <example>
            In this example, the 'forEach' method is a source template available over all values
            of enumerable types, producing ordinary C# 'foreach' statement and placing caret inside block:
            <code>
            [SourceTemplate]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; xs) {
              foreach (var x in xs) {
                 //$ $END$
              }
            }
            </code>
            </example>
        </member>
        <member name="T:JetBrains.Annotations.MacroAttribute">
            <summary>
            Allows specifying a macro for a parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>.
            </summary>
            <remarks>
            You can apply the attribute on the whole method or on any of its additional parameters. The macro expression
            is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Expression"/> property. When applied on a method, the target
            template parameter is defined in the <see cref="P:JetBrains.Annotations.MacroAttribute.Target"/> property. To apply the macro silently
            for the parameter, set the <see cref="P:JetBrains.Annotations.MacroAttribute.Editable"/> property value = -1.
            </remarks>
            <example>
            Applying the attribute on a source template method:
            <code>
            [SourceTemplate, Macro(Target = "item", Expression = "suggestVariableName()")]
            public static void forEach&lt;T&gt;(this IEnumerable&lt;T&gt; collection) {
              foreach (var item in collection) {
                //$ $END$
              }
            }
            </code>
            Applying the attribute on a template method parameter:
            <code>
            [SourceTemplate]
            public static void something(this Entity x, [Macro(Expression = "guid()", Editable = -1)] string newguid) {
              /*$ var $x$Id = "$newguid$" + x.ToString();
              x.DoSomething($x$Id); */
            }
            </code>
            </example>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Expression">
            <summary>
            Allows specifying a macro that will be executed for a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see>
            parameter when the template is expanded.
            </summary>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Editable">
            <summary>
            Allows specifying which occurrence of the target parameter becomes editable when the template is deployed.
            </summary>
            <remarks>
            If the target parameter is used several times in the template, only one occurrence becomes editable;
            other occurrences are changed synchronously. To specify the zero-based index of the editable occurrence,
            use values >= 0. To make the parameter non-editable when the template is expanded, use -1.
            </remarks>>
        </member>
        <member name="P:JetBrains.Annotations.MacroAttribute.Target">
            <summary>
            Identifies the target parameter of a <see cref="T:JetBrains.Annotations.SourceTemplateAttribute">source template</see> if the
            <see cref="T:JetBrains.Annotations.MacroAttribute"/> is applied on a template method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC action. If applied to a method, the MVC action name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcAreaAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC area.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcControllerAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is
            an MVC controller. If applied to a method, the MVC controller name is calculated
            implicitly from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.ChildActionExtensions.RenderAction(HtmlHelper, String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcMasterAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC Master. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcModelTypeAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC model type. Use this attribute
            for custom wrappers similar to <c>System.Web.Mvc.Controller.View(String, Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcPartialViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter is an MVC
            partial view. If applied to a method, the MVC partial view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.RenderPartialExtensions.RenderPartial(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcSuppressViewErrorAttribute">
            <summary>
            ASP.NET MVC attribute. Allows disabling inspections for MVC views within a class or a method.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcDisplayTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC display template.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.Mvc.Html.DisplayExtensions.DisplayForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcEditorTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC editor template.
            Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Html.EditorExtensions.EditorForModel(HtmlHelper, String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcTemplateAttribute">
            <summary>
            ASP.NET MVC attribute. Indicates that a parameter is an MVC template.
            Use this attribute for custom wrappers similar to
            <c>System.ComponentModel.DataAnnotations.UIHintAttribute(System.String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component. If applied to a method, the MVC view name is calculated implicitly
            from the context. Use this attribute for custom wrappers similar to
            <c>System.Web.Mvc.Controller.View(Object)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component name.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcViewComponentViewAttribute">
            <summary>
            ASP.NET MVC attribute. If applied to a parameter, indicates that the parameter
            is an MVC view component view. If applied to a method, the MVC view component view name is default.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AspMvcActionSelectorAttribute">
            <summary>
            ASP.NET MVC attribute. When applied to a parameter of an attribute,
            indicates that this parameter is an MVC action name.
            </summary>
            <example><code>
            [ActionName("Foo")]
            public ActionResult Login(string returnUrl) {
              ViewBag.ReturnUrl = Url.Action("Foo"); // OK
              return RedirectToAction("Bar"); // Error: Cannot resolve action
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.RazorSectionAttribute">
            <summary>
            Razor attribute. Indicates that a parameter or a method is a Razor section.
            Use this attribute for custom wrappers similar to 
            <c>System.Web.WebPages.WebPageBase.RenderSection(String)</c>.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.CollectionAccessAttribute">
            <summary>
            Indicates how method, constructor invocation or property access
            over collection type affects content of the collection.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.None">
            <summary>Method does not use or modify content of the collection.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.Read">
            <summary>Method only reads content of the collection but does not modify it.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.ModifyExistingContent">
            <summary>Method can change content of the collection but does not add new elements.</summary>
        </member>
        <member name="F:JetBrains.Annotations.CollectionAccessType.UpdatedContent">
            <summary>Method can add new elements to the collection.</summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionMethodAttribute">
            <summary>
            Indicates that the marked method is assertion method, i.e. it halts control flow if
            one of the conditions is satisfied. To set the condition, mark one of the parameters with 
            <see cref="T:JetBrains.Annotations.AssertionConditionAttribute"/> attribute.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionAttribute">
            <summary>
            Indicates the condition parameter of the assertion method. The method itself should be
            marked by <see cref="T:JetBrains.Annotations.AssertionMethodAttribute"/> attribute. The mandatory argument of
            the attribute is the assertion type.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.AssertionConditionType">
            <summary>
            Specifies assertion type. If the assertion method argument satisfies the condition,
            then the execution continues. Otherwise, execution is assumed to be halted.
            </summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_TRUE">
            <summary>Marked parameter should be evaluated to true.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_FALSE">
            <summary>Marked parameter should be evaluated to false.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NULL">
            <summary>Marked parameter should be evaluated to null value.</summary>
        </member>
        <member name="F:JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL">
            <summary>Marked parameter should be evaluated to not null value.</summary>
        </member>
        <member name="T:JetBrains.Annotations.TerminatesProgramAttribute">
            <summary>
            Indicates that the marked method unconditionally terminates control flow execution.
            For example, it could unconditionally throw exception.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.LinqTunnelAttribute">
            <summary>
            Indicates that method is pure LINQ method, with postponed enumeration (like Enumerable.Select,
            .Where). This annotation allows inference of [InstantHandle] annotation for parameters
            of delegate type by analyzing LINQ method chains.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoEnumerationAttribute">
            <summary>
            Indicates that IEnumerable, passed as parameter, is not enumerated.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.RegexPatternAttribute">
            <summary>
            Indicates that parameter is regular expression pattern.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NoReorderAttribute">
            <summary>
            Prevents the Member Reordering feature from tossing members of the marked class.
            </summary>
            <remarks>
            The attribute must be mentioned in your member reordering patterns
            </remarks>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the type that has <c>ItemsSource</c> property and should be treated
            as <c>ItemsControl</c>-derived type, to enable inner items <c>DataContext</c> type resolve.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.XamlItemBindingOfItemsControlAttribute">
            <summary>
            XAML attribute. Indicates the property of some <c>BindingBase</c>-derived type, that
            is used to bind some item of <c>ItemsControl</c>-derived type. This annotation will
            enable the <c>DataContext</c> type resolve for XAML bindings for such properties.
            </summary>
            <remarks>
            Property should have the tree ancestor of the <c>ItemsControl</c> type or
            marked with the <see cref="T:JetBrains.Annotations.XamlItemsControlAttribute"/> attribute.
            </remarks>
        </member>
        <member name="T:ThisAssembly">
            <summary>Provides access to the current assembly information.</summary>
        </member>
        <member name="T:ThisAssembly.Git">
            <summary>Provides access to the git information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirty">
            <summary>IsDirty: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.IsDirtyString">
            <summary>IsDirtyString: true</summary>
        </member>
        <member name="F:ThisAssembly.Git.Branch">
            <summary>Branch: remotes/couchbase/release/mercury</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commit">
            <summary>Commit: c8a408f6</summary>
        </member>
        <member name="F:ThisAssembly.Git.Sha">
            <summary>Sha: c8a408f6e9c341814be317b46453b750452009a7</summary>
        </member>
        <member name="F:ThisAssembly.Git.Commits">
            <summary>Commits on top of base version: 20</summary>
        </member>
        <member name="F:ThisAssembly.Git.Tag">
            <summary>Tag: 2.7.0-20-gc8a408f6</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseTag">
            <summary>Base tag: 2.7.0</summary>
        </member>
        <member name="T:ThisAssembly.Git.BaseVersion">
            <summary>Provides access to the base version information used to determine the <see cref="T:ThisAssembly.Git.SemVer" />.</summary>      
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Major">
            <summary>Major: 2</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Minor">
            <summary>Minor: 7</summary>
        </member>
        <member name="F:ThisAssembly.Git.BaseVersion.Patch">
            <summary>Patch: 0</summary>
        </member>
        <member name="T:ThisAssembly.Git.SemVer">
            <summary>Provides access to SemVer information for the current assembly.</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Major">
            <summary>Major: 2</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Minor">
            <summary>Minor: 7</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Patch">
            <summary>Patch: 20</summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Label">
            <summary>Label: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.DashLabel">
            <summary>Label with dash prefix: </summary>
        </member>
        <member name="F:ThisAssembly.Git.SemVer.Source">
            <summary>Source: Tag</summary>
        </member>
    </members>
</doc>
